msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-11-30 23:19+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: \"Droonga tutorial: How to backup and restore the database?\"\n"
"layout: en\n"
"---"
msgstr ""

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## The goal of this tutorial"
msgstr ""

msgid "Learning steps to backup and restore data by your hand."
msgstr ""

msgid "## Precondition"
msgstr ""

msgid ""
"* You must have an existing [Droonga][] cluster with some data.\n"
"  Please complete the [\"getting started\" tutorial](../groonga/) before this."
msgstr ""

msgid ""
"This tutorial assumes that there are two existing Droonga nodes prepared by th"
"e [previous tutorial](../groonga/): `node0` (`192.168.100.50`) and `node1` (`1"
"92.168.100.51`), and there is another computer `node2` (`192.168.100.52`) as a"
" working environment.\n"
"If you have Droonga nodes with other names, read `node0`, `node1` and `node2` "
"in following descriptions as yours."
msgstr ""

msgid "## Backup data in a Droonga cluster"
msgstr ""

msgid "### Install `drndump`"
msgstr ""

msgid ""
"First, install a command line tool named `drndump` via rubygems, to the workin"
"g machine `node2`:"
msgstr ""

msgid ""
"~~~\n"
"# gem install drndump\n"
"~~~"
msgstr ""

msgid ""
"After that, establish that the `drndump` command has been installed successful"
"ly:"
msgstr ""

msgid ""
"~~~\n"
"$ drndump --version\n"
"drndump 1.0.0\n"
"~~~"
msgstr ""

msgid "### Dump all data in a Droonga cluster"
msgstr ""

msgid ""
"The `drndump` command extracts all schema and data as JSONs.\n"
"Let's dump contents of existing your Droonga cluster."
msgstr ""

msgid ""
"For example, if your cluster is constructed from two nodes `node0` (`192.168.1"
"00.50`) and `node1` (`192.168.100.51`), and now you are logged in to new anoth"
"er computer `node2` (`192.168.100.52`). then the command line is:"
msgstr ""

msgid ""
"~~~\n"
"# drndump --host=node0 \\\n"
"           --receiver-host=node2\n"
"{\n"
"  \"type\": \"table_create\",\n"
"  \"dataset\": \"Default\",\n"
"  \"body\": {\n"
"    \"name\": \"Location\",\n"
"    \"flags\": \"TABLE_PAT_KEY\",\n"
"    \"key_type\": \"WGS84GeoPoint\"\n"
"  }\n"
"}\n"
"...\n"
"{\n"
"  \"dataset\": \"Default\",\n"
"  \"body\": {\n"
"    \"table\": \"Store\",\n"
"    \"key\": \"store9\",\n"
"    \"values\": {\n"
"      \"location\": \"146702531x-266363233\",\n"
"      \"name\": \"Macy's 6th Floor - Herald Square - New York NY  (W)\"\n"
"    }\n"
"  },\n"
"  \"type\": \"add\"\n"
"}\n"
"{\n"
"  \"type\": \"column_create\",\n"
"  \"dataset\": \"Default\",\n"
"  \"body\": {\n"
"    \"table\": \"Location\",\n"
"    \"name\": \"store\",\n"
"    \"type\": \"Store\",\n"
"    \"flags\": \"COLUMN_INDEX\",\n"
"    \"source\": \"location\"\n"
"  }\n"
"}\n"
"{\n"
"  \"type\": \"column_create\",\n"
"  \"dataset\": \"Default\",\n"
"  \"body\": {\n"
"    \"table\": \"Term\",\n"
"    \"name\": \"store_name\",\n"
"    \"type\": \"Store\",\n"
"    \"flags\": \"COLUMN_INDEX|WITH_POSITION\",\n"
"    \"source\": \"name\"\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "Note to these things:"
msgstr ""

msgid ""
" * You must specify valid host name of one of nodes in the cluster, via the op"
"tion `--host`.\n"
" * You must specify valid host name or IP address of the computer you are logg"
"ed in, via the option `--receiver-host`.\n"
"   It is used by the Droonga cluster, to send response messages.\n"
" * The result includes complete commands to construct a dataset, same to the s"
"ource."
msgstr ""

msgid ""
"The result is printed to the standard output.\n"
"To save it as a JSONs file, you'll use a redirection like:"
msgstr ""

msgid ""
"~~~\n"
"$ drndump --host=node0 \\\n"
"          --receiver-host=node2 \\\n"
"    > dump.jsons\n"
"~~~"
msgstr ""

msgid "## Restore data to a Droonga cluster"
msgstr ""

msgid "### Install `droonga-client`"
msgstr ""

msgid "The result of `drndump` command is a list of Droonga messages."
msgstr ""

msgid ""
"You need to use `droonga-send` command to send it to your Droogna cluster.\n"
"Install the command included in the package `droonga-client`, via rubygems, to"
" the working machine `node2`:"
msgstr ""

msgid ""
"~~~\n"
"# gem install droonga-client\n"
"~~~"
msgstr ""

msgid ""
"After that, establish that the `droonga-send` command has been installed succe"
"ssfully:"
msgstr ""

msgid ""
"~~~\n"
"$ droonga-send --version\n"
"droonga-send 0.2.0\n"
"~~~"
msgstr ""

msgid "### Prepare an empty Droonga cluster"
msgstr ""

msgid ""
"Assume that there is an empty Droonga cluster constructed from two nodes `node"
"0` (`192.168.100.50`) and `node1` (`192.168.100.51`), now you are logged in to"
" the host `node2` (`192.168.100.52`), and there is a dump file `dump.jsons`."
msgstr ""

msgid ""
"If you are reading this tutorial sequentially, you'll have an existing cluster"
" and the dump file.\n"
"Make it empty with these commands:"
msgstr ""

msgid ""
"~~~\n"
"$ endpoint=\"http://node0:10041\"\n"
"$ curl \"$endpoint/d/table_remove?name=Location\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1406610703.2229023,\n"
"    0.0010793209075927734\n"
"  ],\n"
"  true\n"
"]\n"
"$ curl \"$endpoint/d/table_remove?name=Store\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1406610708.2757723,\n"
"    0.006396293640136719\n"
"  ],\n"
"  true\n"
"]\n"
"$ curl \"$endpoint/d/table_remove?name=Term\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1406610712.379644,\n"
"    6.723403930664062e-05\n"
"  ],\n"
"  true\n"
"]\n"
"~~~"
msgstr ""

msgid ""
"After that the cluster becomes empty.\n"
"Let's confirm it.\n"
"You'll see empty result by `select` and `table_list` commands, like:"
msgstr ""

msgid ""
"~~~\n"
"$ curl \"$endpoint/d/table_list\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1406610804.1535122,\n"
"    0.0002875328063964844\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        \"id\",\n"
"        \"UInt32\"\n"
"      ],\n"
"      [\n"
"        \"name\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"path\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"flags\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"domain\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"range\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"default_tokenizer\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"normalizer\",\n"
"        \"ShortText\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"$ curl -X DELETE \"$endpoint/cache\" | jq \".\"\n"
"true\n"
"$ curl \"$endpoint/d/select?table=Store&output_columns=name&limit=10\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401363465.610241,\n"
"    0\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        null\n"
"      ],\n"
"      []\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid ""
"Note, clear the response cache before sending a request for the `select` comma"
"nd.\n"
"Otherwise you'll see unexpected cached result based on old configurations."
msgstr ""

msgid ""
"Response caches are stored for recent 100 requests, and their lifetime is 1 mi"
"nute, by default.\n"
"You can clear all response caches manually by sending an HTTP `DELETE` request"
" to the path `/cache`, like above."
msgstr ""

msgid "### Restore data from a dump result, to an empty Droonga cluster"
msgstr ""

msgid ""
"Because the result of the `drndump` command includes complete information to c"
"onstruct a dataset same to the source, you can re-construct your cluster from "
"a dump file, even if the cluster is broken.\n"
"You just have to pour the contents of the dump file to an empty cluster, by th"
"e `droonga-send` command."
msgstr ""

msgid "To restore the cluster from the dump file, run a command line like:"
msgstr ""

msgid ""
"~~~\n"
"$ droonga-send --server=node0  \\\n"
"                    dump.jsons\n"
"~~~"
msgstr ""

msgid "Note:"
msgstr ""

msgid ""
" * You must specify valid host name or IP address of one of nodes in the clust"
"er, via the option `--server`."
msgstr ""

msgid "Then the data is completely restored. Confirm it:"
msgstr ""

msgid ""
"~~~\n"
"$ curl -X DELETE \"$endpoint/cache\" | jq \".\"\n"
"true\n"
"$ curl \"$endpoint/d/select?table=Store&output_columns=name&limit=10\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401363556.0294158,\n"
"    7.62939453125e-05\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        40\n"
"      ],\n"
"      [\n"
"        [\n"
"          \"name\",\n"
"          \"ShortText\"\n"
"        ]\n"
"      ],\n"
"      [\n"
"        \"1st Avenue & 75th St. - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"76th & Second - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Herald Square- Macy's - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Macy's 5th Floor - Herald Square - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"80th & York - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Columbus @ 67th - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"45th & Broadway - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Marriott Marquis - Lobby - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Second @ 81st - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"52nd & Seventh - New York NY  (W)\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid "## Duplicate an existing Droonga cluster to another empty cluster directly"
msgstr ""

msgid ""
"If you have multiple Droonga clusters, then you can duplicate one to another.\n"
"For this purpose, the package `droonga-engine` includes a utility command `dro"
"onga-engine-absorb-data`.\n"
"It copies all data from an existing cluster to another one directly, so it is "
"recommended if you don't need to save dump file locally."
msgstr ""

msgid "### Prepare multiple Droonga clusters"
msgstr ""

msgid ""
"Assume that there are two clusters: the source has a node `node0` (`192.168.10"
"0.50`), and the destination has a node `node1' (`192.168.100.51`)."
msgstr ""

msgid ""
"If you are reading this tutorial sequentially, you'll have an existing cluster"
" with two nodes.\n"
"Construct two clusters by `droonga-engine-catalog-modify` and make one cluster"
" empty, with these commands:"
msgstr ""

msgid ""
"~~~\n"
"(on node0)\n"
"# droonga-engine-catalog-modify --replica-hosts=node0\n"
"~~~"
msgstr ""

msgid ""
"~~~\n"
"(on node1)\n"
"# droonga-engine-catalog-modify --replica-hosts=node1\n"
"$ endpoint=\"http://node1:10041\"\n"
"$ curl \"$endpoint/d/table_remove?name=Location\"\n"
"$ curl \"$endpoint/d/table_remove?name=Store\"\n"
"$ curl \"$endpoint/d/table_remove?name=Term\"\n"
"~~~"
msgstr ""

msgid ""
"After that there are two clusters: one contains `node0` with data, another con"
"tains `node1` with no data. Confirm it:"
msgstr ""

msgid ""
"~~~\n"
"$ curl \"http://node0:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"$ curl -X DELETE \"http://node0:10041/cache\" | jq \".\"\n"
"true\n"
"$ curl \"http://node0:10041/d/select?table=Store&output_columns=name&limit=10\" "
"| jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401363556.0294158,\n"
"    7.62939453125e-05\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        40\n"
"      ],\n"
"      [\n"
"        [\n"
"          \"name\",\n"
"          \"ShortText\"\n"
"        ]\n"
"      ],\n"
"      [\n"
"        \"1st Avenue & 75th St. - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"76th & Second - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Herald Square- Macy's - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Macy's 5th Floor - Herald Square - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"80th & York - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Columbus @ 67th - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"45th & Broadway - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Marriott Marquis - Lobby - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Second @ 81st - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"52nd & Seventh - New York NY  (W)\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"$ curl \"http://node1:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node1:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"$ curl -X DELETE \"http://node1:10041/cache\" | jq \".\"\n"
"true\n"
"$ curl \"http://node1:10041/d/select?table=Store&output_columns=name&limit=10\" "
"| jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401363465.610241,\n"
"    0\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        null\n"
"      ],\n"
"      []\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid ""
"Note, `droonga-http-server` is associated to the `droonga-engine` working on s"
"ame computer.\n"
"After you split the cluster like above, `droonga-http-server` on `node0` commu"
"nicates only with `droonga-engine` on `node0`, `droonga-http-server` on `node1"
"` communicates only with `droonga-engine` on `node1`.\n"
"See also the next tutorial for more details."
msgstr ""

msgid "### Duplicate data between two Droonga clusters"
msgstr ""

msgid ""
"To copy data between two clusters, run the `droonga-engine-absorb-data` comman"
"d on a node, like:"
msgstr ""

msgid ""
"~~~\n"
"(on node1)\n"
"$ droonga-engine-absorb-data --source-host=node0 \\\n"
"                             --destination-host=node1 \\\n"
"                             --receiver-host=node1\n"
"Start to absorb data from node0\n"
"                       to node1\n"
"                      via node1 (this host)\n"
"  dataset = Default\n"
"  port    = 10031\n"
"  tag     = droonga"
msgstr ""

msgid ""
"Absorbing...\n"
"...\n"
"Done.\n"
"~~~"
msgstr ""

msgid "You can run the command on different node, like:"
msgstr ""

msgid ""
"~~~\n"
"(on node2)\n"
"$ droonga-engine-absorb-data --source-host=node0 \\\n"
"                             --destination-host=node1 \\\n"
"                             --receiver-host=node2\n"
"Start to absorb data from node0\n"
"                       to node1\n"
"                      via node2 (this host)\n"
"...\n"
"~~~"
msgstr ""

msgid ""
"Note that you must specify the host name (or the IP address) of the working ma"
"chine via the `--receiver-host` option."
msgstr ""

msgid ""
"After that contents of these two clusters are completely synchronized. Confirm"
" it:"
msgstr ""

msgid ""
"~~~\n"
"$ curl -X DELETE \"http://node1:10041/cache\" | jq \".\"\n"
"true\n"
"$ curl \"http://node1:10041/d/select?table=Store&output_columns=name&limit=10\" "
"| jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401363556.0294158,\n"
"    7.62939453125e-05\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        40\n"
"      ],\n"
"      [\n"
"        [\n"
"          \"name\",\n"
"          \"ShortText\"\n"
"        ]\n"
"      ],\n"
"      [\n"
"        \"1st Avenue & 75th St. - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"76th & Second - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Herald Square- Macy's - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Macy's 5th Floor - Herald Square - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"80th & York - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Columbus @ 67th - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"45th & Broadway - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Marriott Marquis - Lobby - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Second @ 81st - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"52nd & Seventh - New York NY  (W)\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid "### Unite two Droonga clusters"
msgstr ""

msgid "Run following command lines to unite these two clusters:"
msgstr ""

msgid ""
"~~~\n"
"(on node0)\n"
"# droonga-engine-catalog-modify --add-replica-hosts=node1\n"
"~~~"
msgstr ""

msgid ""
"~~~\n"
"(on node1)\n"
"# droonga-engine-catalog-modify --add-replica-hosts=node0\n"
"~~~"
msgstr ""

msgid "After that there is just one cluster - yes, it's the initial state."
msgstr ""

msgid ""
"~~~\n"
"$ curl \"http://node0:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"node1:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "## Conclusion"
msgstr ""

msgid ""
"In this tutorial, you did backup a [Droonga][] cluster and restore the data.\n"
"Moreover, you did duplicate contents of an existing Droogna cluster to another"
" empty cluster."
msgstr ""

msgid ""
"Next, let's learn [how to add a new replica to an existing Droonga cluster](.."
"/add-replica/)."
msgstr ""

msgid ""
"  [Ubuntu]: http://www.ubuntu.com/\n"
"  [Droonga]: https://droonga.org/\n"
"  [Groonga]: http://groonga.org/\n"
"  [command reference]: ../../reference/commands/"
msgstr ""
