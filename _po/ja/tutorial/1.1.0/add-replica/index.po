msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-11-30 23:19+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: \"Droonga tutorial: How to add a new replica to an existing cluster?\"\n"
"layout: en\n"
"---"
msgstr ""

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## The goal of this tutorial"
msgstr ""

msgid ""
"Learning steps to add a new replica node, remove an existing replica, and repl"
"ace a replica with new one, for your existing [Droonga][] cluster."
msgstr ""

msgid "## Precondition"
msgstr ""

msgid ""
"* You must have an existing Droonga cluster with some data.\n"
"  Please complete the [\"getting started\" tutorial](../groonga/) before this.\n"
"* You must know how to duplicate data between multiple clusters.\n"
"  Please complete the [\"How to backup and restore the database?\" tutorial](../"
"dump-restore/) before this."
msgstr ""

msgid ""
"This tutorial assumes that there are two existing Droonga nodes prepared by th"
"e [first tutorial](../groonga/): `node0` (`192.168.100.50`) and `node1` (`192."
"168.100.51`), and there is another computer `node2` (`192.168.100.52`) for a n"
"ew node.\n"
"If you have Droonga nodes with other names, read `node0`, `node1` and `node2` "
"in following descriptions as yours."
msgstr ""

msgid "## What's \"replica\"?"
msgstr ""

msgid "There are two axes, \"replica\" and \"slice\", for Droonga nodes."
msgstr ""

msgid ""
"All \"replica\" nodes have completely equal data, so they can process your reque"
"sts (ex. \"search\") parallelly.\n"
"You can increase the capacity of your cluster to process increasing requests, "
"by adding new replicas."
msgstr ""

msgid ""
"On the other hand, \"slice\" nodes have different data, for example, one node co"
"ntains data of the year 2013, another has data of 2014.\n"
"You can increase the capacity of your cluster to store increasing data, by add"
"ing new slices."
msgstr ""

msgid ""
"Currently, for a Droonga cluster which is configured as a Groonga compatible s"
"ystem, only replicas can be added, but slices cannot be done.\n"
"We'll improve extensibility for slices in the future."
msgstr ""

msgid ""
"Anyway, this tutorial explains how to add a new replica node to an existing Dr"
"oogna cluster.\n"
"Here we go!"
msgstr ""

msgid "## Add a new replica node to an existing cluster"
msgstr ""

msgid ""
"In this case you don't have to stop the cluster working, for any read-only req"
"uests like \"search\".\n"
"You can add a new replica, in the backstage, without downing your service."
msgstr ""

msgid ""
"On the other hand, you have to stop inpouring of new data to the cluster until"
" the new node starts working.\n"
"(In the future we'll provide mechanism to add new nodes completely silently wi"
"thout any stopping of data-flow, but currently can't.)"
msgstr ""

msgid ""
"Assume that there is a Droonga cluster constructed with two replica nodes `nod"
"e0` and `node1`, and we are going to add a new replica node `node2`."
msgstr ""

msgid "### Setup a new node"
msgstr ""

msgid "First, prepare a new computer, install required softwares and configure them."
msgstr ""

msgid ""
"~~~\n"
"(on node2)\n"
"# curl https://raw.githubusercontent.com/droonga/droonga-engine/master/install"
".sh | \\\n"
"    HOST=node2 bash\n"
"# curl https://raw.githubusercontent.com/droonga/droonga-http-server/master/in"
"stall.sh | \\\n"
"    ENGINE_HOST=node2 HOST=node2 bash\n"
"~~~"
msgstr ""

msgid ""
"Note, you cannot add a non-empty node to an existing cluster.\n"
"If the computer was used as a Droonga node in old days, then you must clear ol"
"d data at first."
msgstr ""

msgid ""
"~~~\n"
"(on node2)\n"
"# droonga-engine-configure --quiet \\\n"
"                           --clear --reset-config --reset-catalog \\\n"
"                           --host=node2\n"
"# droonga-http-server-configure --quiet --reset-config \\\n"
"                                --droonga-engine-host-name=node2 \\\n"
"                                --receive-host-name=node2\n"
"~~~"
msgstr ""

msgid "Let's start services."
msgstr ""

msgid ""
"~~~\n"
"(on node2)\n"
"# service droonga-engine start\n"
"# service droonga-http-server start\n"
"~~~"
msgstr ""

msgid ""
"Currently, the new node doesn't work as a node of the existing cluster.\n"
"You can confirm that, via the `system.status` command:"
msgstr ""

msgid ""
"~~~\n"
"$ curl \"http://node0:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"node1:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"$ curl \"http://node1:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"node1:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"$ curl \"http://node2:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node2:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "### Suspend inpouring of \"write\" requests"
msgstr ""

msgid ""
"Before starting to change cluster composition, you must suspend inpouring of \""
"write\" requests to the cluster, because we have to synchronize data to the new"
" replica.\n"
"Otherwise, the new added replica will contain incomplete data and results for "
"requests to the cluster become unstable."
msgstr ""

msgid ""
"What's \"write\" request?\n"
"In particular, these commands modify data in the cluster:"
msgstr ""

msgid ""
" * `add`\n"
" * `column_create`\n"
" * `column_remove`\n"
" * `delete`\n"
" * `load`\n"
" * `table_create`\n"
" * `table_remove`"
msgstr ""

msgid ""
"If you load new data via the `load` command triggered by a batch script starte"
"d as a cronjob, disable the job.\n"
"If a crawler agent adds new data via the `add` command, stop it.\n"
"If you put a fluentd as a buffer between crawler or loader and the cluster, st"
"op outgoing messages from the buffer."
msgstr ""

msgid ""
"If you are reading this tutorial sequentially after the [previous topic](../du"
"mp-restore/), there is no incoming requests, so you have nothing to do."
msgstr ""

msgid "### Joining a new replica node to the cluster"
msgstr ""

msgid ""
"To add a new replica node to an existing cluster, you just run a command `droo"
"nga-engine-join` on one of existing replica nodes or the new replica node, in "
"the directory the `catalog.json` is located, like:"
msgstr ""

msgid ""
"~~~\n"
"(on node2)\n"
"$ droonga-engine-join --host=node2 \\\n"
"                      --replica-source-host=node0 \\\n"
"                      --receiver-host=node2\n"
"Start to join a new node node2\n"
"       to the cluster of node0\n"
"                     via node2 (this host)\""
msgstr ""

msgid ""
"Joining new replica to the cluster...\n"
"...\n"
"Update existing hosts in the cluster...\n"
"...\n"
"Done.\n"
"~~~"
msgstr ""

msgid "You can run the command on different node, like:"
msgstr ""

msgid ""
"~~~\n"
"(on node1)\n"
"$ droonga-engine-join --host=node2 \\\n"
"                      --replica-source-host=node0 \\\n"
"                      --receiver-host=node1\n"
"Start to join a new node node2\n"
"       to the cluster of node0\n"
"                     via node1 (this host)\"\n"
"~~~"
msgstr ""

msgid ""
" * You must specify the host name (or the IP address) of the new replica node,"
" via the `--host` option.\n"
" * You must specify the host name (or the IP address) of an existing node of t"
"he cluster, via the `--replica-source-host` option.\n"
" * You must specify the host name (or the IP address) of the working machine v"
"ia the `--receiver-host` option."
msgstr ""

msgid ""
"Then the command automatically starts to synchronize all data of the cluster t"
"o the new replica node.\n"
"After data is successfully synchronized, the node restarts and joins to the cl"
"uster automatically.\n"
"All nodes' `catalog.json` are also updated, and now, yes, the new node starts "
"working as a replica in the cluster."
msgstr ""

msgid ""
"You can confirm that they are working as a cluster, via the `system.status` co"
"mmand:"
msgstr ""

msgid ""
"~~~\n"
"$ curl \"http://node0:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"node1:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"node2:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"Because the new node `node2` has become a member of the cluster, `droonga-http"
"-server` on each node distributes messages to `node2` also automatically."
msgstr ""

msgid "### Resume inpouring of \"write\" requests"
msgstr ""

msgid ""
"OK, it's the time.\n"
"Because all replica nodes are completely synchronized, the cluster now can pro"
"cess any request stably.\n"
"Resume inpouring of requests which can modify the data in the cluster - cronjo"
"bs, crawlers, buffers, and so on."
msgstr ""

msgid "With that, a new replica node has joined to your Droonga cluster successfully."
msgstr ""

msgid "## Remove an existing replica node from an existing cluster"
msgstr ""

msgid ""
"A Droonga node can die by various fatal reasons - for example, OOM killer, dis"
"k-full error, troubles around its hardware, etc.\n"
"Because nodes in a Droonga cluster observe each other and they stop delivering"
" messages to dead nodes automatically, the cluster keeps working even if there"
" are some dead nodes.\n"
"Then you have to remove dead nodes from the cluster."
msgstr ""

msgid ""
"Of course, even if a node is still working, you may plan to remove it to reuse"
" for another purpose."
msgstr ""

msgid ""
"Assume that there is a Droonga cluster constructed with trhee replica nodes `n"
"ode0`, `node1` and `node2`, and planning to remove the last node `node2` from "
"the cluster."
msgstr ""

msgid "### Unjoin an existing replica from the cluster"
msgstr ""

msgid ""
"To remove a replica from an existing cluster, you just run the `droonga-engine"
"-unjoin` command on any existing node in the cluster, like:"
msgstr ""

msgid ""
"~~~\n"
"(on node0)\n"
"$ droonga-engine-unjoin --host=node2 \\\n"
"                        --receiver-host=node0\n"
"Start to unjoin a node node2\n"
"                    by node0 (this host)"
msgstr ""

msgid ""
"Unjoining replica from the cluster...\n"
"...\n"
"Done.\n"
"~~~"
msgstr ""

msgid ""
" * You must specify the host name (or the IP address) of an existing node to b"
"e removed from the cluster, via the `--host` option.\n"
" * You must specify the host name (or the IP address) of the working machine v"
"ia the `--receiver-host` option."
msgstr ""

msgid ""
"Then the specified node automatically unjoins from the cluster, and all nedes'"
" `catalog.json` are also updated.\n"
"Now, the node has been successfully unjoined from the cluster."
msgstr ""

msgid ""
"You can confirm that the `node2` is successfully unjoined, via the `system.sta"
"tus` command:"
msgstr ""

msgid ""
"Because the node `node2` is not a member of the cluster anymore, `droonga-http"
"-server` on `node0` and `node1` never send messages to the `droonga-engine` on"
" `node2`.\n"
"On the other hand, because `droonga-http-server` on `node2` is associated only"
" to the `droonga-engine` on same node, it never sends messages to other nodes."
msgstr ""

msgid "## Replace an existing replica node in a cluster with a new one"
msgstr ""

msgid "Replacing of nodes is a combination of those instructions above."
msgstr ""

msgid ""
"Assume that there is a Droonga cluster constructed with two replica nodes `nod"
"e0` and `node1`, the node `node1` is unstable, and planning to replace it with"
" a new node `node2`."
msgstr ""

msgid ""
"First, remove the unstable node.\n"
"Remove the node from the cluster, like:"
msgstr ""

msgid ""
"~~~\n"
"(on node0)\n"
"$ droonga-engine-unjoin --host=node1\n"
"~~~"
msgstr ""

msgid ""
"Now the node has been gone.\n"
"You can confirm that via the `system.status` command:"
msgstr ""

msgid ""
"~~~\n"
"$ curl \"http://node0:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "### Add a new replica"
msgstr ""

msgid ""
"Next, setup the new replica `node2`.\n"
"Install required packages, generate the `catalog.json`, and start services."
msgstr ""

msgid ""
"If the computer was used as a Droonga node in old days, then you must clear ol"
"d data instead of installation:"
msgstr ""

msgid "Then, join the node to the cluster."
msgstr ""

msgid ""
"~~~\n"
"(on node2)\n"
"$ droonga-engine-join --host=node2 \\\n"
"                      --replica-source-host=node0\n"
"~~~"
msgstr ""

msgid ""
"Finally a Droonga cluster constructed with two nodes `node0` and `node2` is he"
"re."
msgstr ""

msgid "You can confirm that, via the `system.status` command:"
msgstr ""

msgid ""
"~~~\n"
"$ curl \"http://node0:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"node2:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"$ curl \"http://node2:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"node2:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "## Conclusion"
msgstr ""

msgid ""
"In this tutorial, you did add a new replica node to an existing [Droonga][] cl"
"uster.\n"
"Moreover, you did remove an existing replica, and did replace a replica with a"
" new one."
msgstr ""

msgid ""
"  [Ubuntu]: http://www.ubuntu.com/\n"
"  [Droonga]: https://droonga.org/\n"
"  [Groonga]: http://groonga.org/\n"
"  [command reference]: ../../reference/commands/"
msgstr ""
