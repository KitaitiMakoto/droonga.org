msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-03-05 12:52+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: \"Droonga tutorial: How to add a new replica to an existing cluster?\"\n"
"layout: en\n"
"---"
msgstr ""
"---\n"
"title: \"Droonga tutorial: 既存クラスタへのreplicaの追加\"\n"
"layout: ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## The goal of this tutorial"
msgstr "## チュートリアルのゴール"

msgid ""
"Learning steps to add a new replica node, remove an existing replica, and repl"
"ace a replica with new one, for your existing [Droonga][] cluster."
msgstr ""
"既存の[Droonga][]クラスタについて、新しいreplicaを追加し、既存のreplicaを削除し、および、既存のreplicaを新しいreplica"
"で置き換えるための手順を学ぶこと。"

msgid "## Precondition"
msgstr "## 前提条件"

msgid ""
"* You must have an existing Droonga cluster with some data.\n"
"  Please complete the [\"getting started\" tutorial](../groonga/) before this.\n"
"* You must know how to duplicate data between multiple clusters.\n"
"  Please complete the [\"How to backup and restore the database?\" tutorial](../"
"dump-restore/) before this.\n"
"* Your `catalog.json` must have the plugin `status` in the list of plugins.\n"
"  Otherwise, you must add it, like:"
msgstr ""
"* 何らかのデータが格納されている状態の[Droonga][]クラスタがあること。\n"
"  このチュートリアルを始める前に、[「使ってみる」のチュートリアル](../groonga/)を完了している事が望ましいです\n"
"* 複数のクラスタの間でのデータの複製方法を把握していること。\n"
"  このチュートリアルを始める前に、[バックアップと復元のチュートリアル](../dump-restore/)を完了しておいてください。\n"
"* `catalog.json`に`status`プラグインが登録済みであること。\n"
"  未登録の場合は、以下のようにして`plugins`の一覧に`status`を追加しておいて下さい："

msgid ""
"      - \"plugins\": [\"groonga\", \"crud\", \"search\", \"dump\"],\n"
"      + \"plugins\": [\"groonga\", \"crud\", \"search\", \"dump\", \"status\"],"
msgstr ""

msgid "## What's \"replica\"?"
msgstr "## 「replica」とは？"

msgid "There are two axes, \"replica\" and \"slice\", for Droonga nodes."
msgstr "Droongaのノードの集合には、「replica」と「slice」という2つの軸があります。"

msgid ""
"All \"replica\" nodes have completely equal data, so they can process your reque"
"sts (ex. \"search\") parallelly.\n"
"You can increase the capacity of your cluster to process increasing requests, "
"by adding new replicas."
msgstr ""
"「replica」のノード群は、完全に同一のデータを持っており、検索などのリクエストを各ノードが並行して処理する事ができます\n"
"新しいreplicaを追加する事によって、増加するリクエストに対して処理能力を増強することができます。"

msgid ""
"On the other hand, \"slice\" nodes have different data, for example, one node co"
"ntains data of the year 2013, another has data of 2014.\n"
"You can increase the capacity of your cluster to store increasing data, by add"
"ing new slices."
msgstr ""
"他方、「slice」のノード群はそれぞれ異なるデータを持ちます（例えば、あるノードは2013年のデータ、別のノードは2014年のデータ、という具合です）。\n"
"新しいsliceを追加する事によって、増大するデータ量に対してクラスタとしての容量を拡大することができます。"

msgid ""
"Currently, for a Droonga cluster which is configured as a Groonga compatible s"
"ystem, only replicas can be added, but slices cannot be done.\n"
"We'll improve extensibility for slices in the future."
msgstr ""
"現在の所、Groonga互換のシステムとして設定されたDroongaクラスタについては、replicaを追加することはできますが、sliceを追加することは"
"できません。\n"
"この点については将来のバージョンで改善する予定です。"

msgid ""
"Anyway, this tutorial explains how to add a new replica node to an existing Dr"
"oogna cluster.\n"
"Here we go!"
msgstr ""
"ともかく、このチュートリアルでは既存のDroongaクラスタに新しいreplicaを追加する手順を解説します。\n"
"早速始めましょう。"

msgid "## Add a new replica node to an existing cluster"
msgstr "## 既存のクラスタに新しいreplicaノードを追加する"

msgid ""
"In this case you don't have to stop the cluster working, for any read-only req"
"uests like \"search\".\n"
"You can add a new replica, in the backstage, without downing your service."
msgstr ""
"このケースでは、検索のように読み取りのみを行うリクエストに対しては、クラスタの動作を止める必要はありません。\n"
"サービスを停止することなく、その裏側でシームレスに新しいreplicaを追加することができます。"

msgid ""
"On the other hand, you have to stop inpouring of new data to the cluster until"
" the new node starts working.\n"
"(In the future we'll provide mechanism to add new nodes completely silently wi"
"thout any stopping of data-flow, but currently can't.)"
msgstr ""
"その一方で、クラスタへの新しいデータの流入は、新しいノードが動作を始めるまでの間停止しておく必要があります。\n"
"（将来的には、新しいノードを完全に無停止で追加できるようにする予定ですが、今のところはそれはできません。）"

msgid ""
"Assume that there is a Droonga cluster constructed with two replica nodes `192"
".168.0.10` and `192.168.0.11`, and we are going to add a new replica node `192"
".168.0.12`."
msgstr ""
"ここでは、`192.168.0.10` と `192.168.0.11` の2つのreplicaノードからなるDroongaクラスタがあり、新しいrepli"
"caノードとして `192.168.0.12` を追加すると仮定します。"

msgid "### Setup a new node"
msgstr "### 新しいノードをセットアップする"

msgid "First, prepare a new computer, install required softwares and configure them."
msgstr "まず、新しいコンピュータをセットアップし、必要なソフトウェアのインストールと設定を済ませます。"

msgid ""
"    (on 192.168.0.12)\n"
"    # apt-get update\n"
"    # apt-get -y upgrade\n"
"    # apt-get install -y ruby ruby-dev build-essential nodejs nodejs-legacy np"
"m\n"
"    # gem install droonga-engine\n"
"    # npm install -g droonga-http-server\n"
"    # mkdir ~/droonga"
msgstr ""

msgid ""
"Then, remember the command line you executed to generate `catalog.json` for yo"
"ur cluster.\n"
"It was:"
msgstr "ここで、以前にクラスタを構築する時に `catalog.json` を生成するために実行したコマンド列を思い出して下さい:"

msgid ""
"    (on 192.168.0.10 or 192.168.0.11)\n"
"    # droonga-engine-catalog-generate --hosts=192.168.0.10,192.168.0.11 \\\n"
"                                      --output=~/droonga/catalog.json"
msgstr ""

msgid ""
"For the new node, you have to generate a `custom.json` includes only one node,"
" with same options except the `--host` option, like:"
msgstr "新しいノード用には、`--host` オプションの値以外はすべて同じ指定で、単一のノードだけを含む `catalog.json` を生成します:"

msgid ""
"    (on 192.168.0.12)\n"
"    # droonga-engine-catalog-generate --hosts=192.168.0.12 \\\n"
"                                      --output=~/droonga/catalog.json"
msgstr ""

msgid "Let's start the server."
msgstr "では、サーバを起動しましょう。"

msgid ""
"    (on 192.168.0.12)\n"
"    # cd ~/droonga\n"
"    # host=192.168.0.12\n"
"    # DROONGA_BASE_DIR=$PWD\n"
"    # droonga-engine --host=$host \\\n"
"                     --log-file=$DROONGA_BASE_DIR/droonga-engine.log \\\n"
"                     --daemon \\\n"
"                     --pid-file=$DROONGA_BASE_DIR/droonga-engine.pid\n"
"    # env NODE_ENV=production \\\n"
"        droonga-http-server --port=10041 \\\n"
"                            --receive-host-name=$host \\\n"
"                            --droonga-engine-host-name=$host \\\n"
"                            --cache-size=-1 \\\n"
"                            --daemon \\\n"
"                            --pid-file=$DROONGA_BASE_DIR/droonga-http-server.p"
"id"
msgstr ""

msgid "Then there are two separate Droonga clusters on this time."
msgstr "この時点で、2つの別々のDroongaクラスタが存在するようになりました。"

msgid ""
" * The existing cluster including two replicas.\n"
"   Let's give a name *\"alpha\"* to it, for now.\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
" * The new cluster including just one replica.\n"
"   Let's give a name *\"beta\"* to it, for now.\n"
"   * `192.168.0.12`"
msgstr ""
" * 2つのreplicaを含む既存のクラスタ。以下、*「alpha」*と仮称します。\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
" * 1つのreplicaを含む新しいクラスタ。以下、*「beta」*と仮称します。\n"
"   * `192.168.0.12`"

msgid "You can confirm that, via the `status` command:"
msgstr "この事は、`status` コマンドの結果を見ると確認できます:"

msgid ""
"~~~\n"
"(for the cluster alpha)\n"
"# curl \"http://192.168.0.10:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"# curl \"http://192.168.0.11:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"`192.168.0.10` and `192.168.0.11` are members of the cluster alpha, so they re"
"turn same result.\n"
"`192.168.0.12` doesn't appear in the result because it is not a member of the "
"cluster alpha."
msgstr ""
"`192.168.0.10` と `192.168.0.11` は共にクラスタ alpha を構成しているため、両ノードは同じ結果を返します。\n"
"`192.168.0.12` はクラスタ alpha の構成ノードではないため、この結果には登場しません。"

msgid "On the other hand, `192.168.0.12` returns a result like:"
msgstr "他方、`192.168.0.12` は以下のような結果を返します："

msgid ""
"~~~\n"
"(for the cluster beta)\n"
"# curl \"http://192.168.0.12:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"It is a result for the cluster beta, so `192.168.0.10` and `192.168.0.11` don'"
"t appear."
msgstr "これはクラスタ beta の結果なので、今度は `192.168.0.10` と `192.168.0.11` が登場しません。"

msgid "### Suspend inpouring of \"write\" requests"
msgstr "### 書き込みを伴うリクエストの流入を一時的に停止する"

msgid ""
"Before starting  duplication of data, you must suspend inpouring of \"write\" re"
"quests to the cluster alpha, because we have to synchronize data in clusters a"
"lpha and beta completely.\n"
"Otherwise, the new added replica node will contain incomplete data.\n"
"Because data in replicas will be inconsistent, results for any request to the "
"cluster become unstable."
msgstr ""
"クラスタ alpha とクラスタ beta のデータを完全に同期する必要があるので、データの複製を始める前に、クラスタ alphaへのデータの書き込みを行う"
"リクエストの流入を一時停止する必要があります。\n"
"そうしないと、新しく追加したreplicaが中途半端なデータしか持たない状態となってしまいます。\n"
"replica同士の内容に矛盾があると、リクエストに対してクラスタが返す処理結果が不安定になります。"

msgid ""
"What's \"write\" request?\n"
"In particular, these commands modify data in the cluster:"
msgstr "データの書き込みを伴うリクエストとは、具体的には、クラスタ内のデータを変更する以下のコマンドです:"

msgid ""
" * `add`\n"
" * `column_create`\n"
" * `column_remove`\n"
" * `delete`\n"
" * `load`\n"
" * `table_create`\n"
" * `table_remove`"
msgstr ""

msgid ""
"If you load new data via the `load` command triggered by a batch script starte"
"d as a cronjob, disable the job.\n"
"If a crawler agent adds new data via the `add` command, stop it.\n"
"If you put a fluentd as a buffer between crawler or loader and the cluster, st"
"op outgoing messages from the buffer."
msgstr ""
"cronjobとして実行されるバッチスクリプトによって `load` コマンド経由で新しいデータを投入している場合は、cronjobを停止して下さい。\n"
"クローラが `add` コマンド経由で新しいデータを投入している場合は、クローラを停止して下さい。\n"
"あるいは、クローラやローダーとクラスタの間にFluentdを置いてバッファとして利用しているのであれば、バッファからのメッセージ出力を停止して下さい。"

msgid ""
"If you are reading this tutorial sequentially after the [previous topic](../du"
"mp-restore/), there is no incoming requests, so you have nothing to do."
msgstr ""
"[前項](../dump-restore/)から順番にチュートリアルを読んでいる場合、クラスタに流入しているリクエストはありませんので、ここでは特に何もする"
"必要はありません。"

msgid "### Duplicate data from the existing cluster to the new replica"
msgstr "### 既存のクラスタから新しいreplicaへデータを複製する"

msgid ""
"Duplicate data from the cluster alpha to the cluster beta.\n"
"It can be done by `drndump` and `droonga-request` commands.\n"
"(You have to install `drndump` and `droonga-client` gem packages.)"
msgstr ""
"クラスタ alpha からクラスタ beta へデータを複製します。\n"
"これは `drndump` と `droonga-request` の各コマンドを使って行います。\n"
"（Gemパッケージ `drndump` と `droonga-client` をあらかじめインストールしておいて下さい。）"

msgid ""
"    (on 192.168.0.12)\n"
"    # drndump --host=192.168.0.10 \\\n"
"              --receiver-host=192.168.0.12 | \\\n"
"        droonga-request --host=192.168.0.12 \\\n"
"                        --receiver-host=192.168.0.12"
msgstr ""

msgid ""
"Note that you must specify the host name or the IP address of the machine via "
"the `--receiver-host` option.\n"
"If you run the command line on the node `192.168.0.11`, then:"
msgstr ""
"`--receiver-host` オプションに作業マシン自身のホスト名またはIPアドレスを指定しておく必要がある事に注意して下さい。\n"
"ノード `192.168.0.11` の上で作業する場合であれば、コマンド列は以下の通りです:"

msgid ""
"    (on 192.168.0.11)\n"
"    # drndump --host=192.168.0.10 \\\n"
"              --receiver-host=192.168.0.11 | \\\n"
"        droonga-request --host=192.168.0.12 \\\n"
"                        --receiver-host=192.168.0.11"
msgstr ""

msgid "### Join the new replica to the cluster"
msgstr "### 新しいreplicaをクラスタに参加させる"

msgid ""
"After the duplication is successfully done, join the new replica to the existi"
"ng clster.\n"
"Re-generate the `catalog.json` on the newly joining node `192.168.0.12`, with "
"all nodes specified via the `--hosts` option, like:"
msgstr ""
"データを正しく複製できたら、新しいreplicaを既存のクラスタに参加させます。\n"
"新たにクラスタに参加するノード `192.168.0.12` 上で、すべてノードを `--hosts` オプションに指定して `catalog.json` "
"を再作成してください:"

msgid ""
"    (on 192.168.0.12)\n"
"    # droonga-engine-catalog-generate --hosts=192.168.0.10,192.168.0.11,192.16"
"8.0.12 \\\n"
"                                      --output=~/droonga/catalog.json"
msgstr ""

msgid ""
"The server process detects new `catalog.json` and restats itself automatically"
"."
msgstr "すると、サーバのプロセスが新しい `catalog.json` を検知して、自動的に自分自身を再起動させます。"

msgid "Then there are two overlapping Droonga clusters theoretically on this time."
msgstr "この時点で、理論上、部分的に重なり合う2つのDroongaクラスタが存在するようになりました。"

msgid ""
" * The existing cluster \"alpha\", including two replicas.\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
" * The new cluster including three replicas.\n"
"   Let's give a name *\"charlie\"* to it, for now.\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
"   * `192.168.0.12`"
msgstr ""
" * 2つのreplicaを含む既存のクラスタ「alpha」。\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
" * 3つのreplicaを含む新しいクラスタ。以下、*「charlie」*と仮称します。\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
"   * `192.168.0.12`"

msgid "You can confirm that, via the `status` command for each cluster:"
msgstr "この事は、各クラスタに対する `status` コマンドの実行結果を見ると確認できます:"

msgid ""
"Because `catalog.json` on nodes `192.168.0.10` and `192.168.0.11` have no chan"
"ge, the result says that there is still the cluster alpha with only two nodes."
"\n"
"Any incoming request to the cluster alpha is never delivered to the new replic"
"a `192.168.0.12` yet."
msgstr ""
"`192.168.0.10` と `192.168.0.11` の `catalog.json` には何も変更がないため、コマンドの実行結果は依然として2つ"
"のノードから構成されるクラスタ alpha の情報を返します。\n"
"クラスタ alpha へ流入するリクエストは、まだ新しい replica である `192.168.0.12` には配送されません。"

msgid ""
"However, the new node `192.168.0.12` has a new `catalog.json`.\n"
"It knows the cluster charlie includes three nodes, even if other two existing "
"nodes don't know that:"
msgstr ""
"しかし、新しいノード `192.168.0.12` は新しい `catalog.json` を持っています。\n"
"他の2つの既存ノードがその事を知らなくても、このノードはクラスタ charlie が3つのノードを含んでいる事を知っています："

msgid ""
"~~~\n"
"(for the cluster charlie)\n"
"# curl \"http://192.168.0.12:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "Note that the temporary cluster named \"beta\" is gone."
msgstr "「beta」と仮称した一時的なクラスタが姿を消している事に注意してください。"

msgid "Next, copy new `catalog.json` from `192.168.0.12` to others."
msgstr "次に、新しい `catalog.json` を`192.168.0.12` から他のノードにコピーします。"

msgid ""
"    (on 192.168.0.12)\n"
"    # scp ~/droonga/catalog.json 192.168.0.10:~/droonga/\n"
"    # scp ~/droonga/catalog.json 192.168.0.11:~/droonga/"
msgstr ""

msgid "Servers detect new `catalog.json` and restart themselves automatically."
msgstr "コピー先のノードのサーバが新しい `catalog.json` を認識して、自動的に再起動します。"

msgid "Then there is just one Droonga clusters on this time."
msgstr "この時点で、Droongaクラスタは1つだけ存在する状態となっています。"

msgid ""
" * The new cluster \"charlie\",including three replicas.\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
"   * `192.168.0.12`"
msgstr ""
" * 3つのreplicaを含む新しいクラスタ「charlie」。\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
"   * `192.168.0.12`"

msgid ""
"~~~\n"
"# curl \"http://192.168.0.10:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"# curl \"http://192.168.0.11:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"# curl \"http://192.168.0.12:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "Any node returns same result."
msgstr "いずれのノードも同じ結果を返します。"

msgid ""
"Note that the old cluster named \"alpha\" is gone.\n"
"Now the new cluster \"charlie\" with three replicas works perfectly, instead of "
"the old one with two replicas."
msgstr ""
"「alpha」と仮称した古いクラスタが姿を消している事に注意してください。\n"
"この時、2つのreplicaからなる古いクラスタの代わりとして、新しいクラスタ「charlie」は3つのreplicaのもとで完璧に動作しています。"

msgid "### Resume inpouring of \"write\" requests"
msgstr "### 書き込みを伴うリクエストの流入を再開する"

msgid ""
"OK, it's the time.\n"
"Because all replica nodes are completely synchronized, the cluster now can pro"
"cess any request stably.\n"
"Resume inpouring of requests which can modify the data in the cluster - cronjo"
"bs, crawlers, buffers, and so on."
msgstr ""
"さて、準備ができました。\n"
"すべてのreplicaは完全に同期した状態となっているので、このクラスタはリクエストを安定して処理できます。\n"
"cronjobを有効化する、クローラの動作を再開する、バッファからのメッセージ送出を再開する、などの操作を行って、クラスタ内のデータを変更するリクエストの流"
"入を再開して下さい。"

msgid "With that, a new replica node has joined to your Droonga cluster successfully."
msgstr "以上で、Droongaクラスタに新しいreplicaノードを無事参加させる事ができました。"

msgid "## Remove an existing replica node from an existing cluster"
msgstr "## 既存のクラスタからreplicaノードを削除する"

msgid ""
"A Droonga node can die by various fatal reasons - for example, OOM killer, dis"
"k-full error, troubles around its hardware, etc.\n"
"Because nodes in a Droonga cluster observe each other and they stop delivering"
" messages to dead nodes automatically, the cluster keeps working even if there"
" are some dead nodes.\n"
"Then you have to remove dead nodes from the cluster."
msgstr ""
"Droongaノードは、メモリ不足、ディスク容量不足、ハードウェア障害など、様々な致命的な理由によって動作しなくなり得ます。\n"
"Droongaクラスタ内のノードは互いに監視しあっており、動作しなくなったノードに対してはメッセージの配送を自動的に停止して、動作しないノードがあってもクラ"
"スタ全体としては動作し続けるようになっています。\n"
"このような時には、動作していないノードを取り除く必要があります。"

msgid ""
"Of course, even if a node is still working, you may plan to remove it to reuse"
" for another purpose."
msgstr "もちろん、他の目的に転用したいといった理由から、正常動作中のノードを取り除きたいと考える場合もあるでしょう。"

msgid ""
"Assume that there is a Droonga cluster constructed with trhee replica nodes `1"
"92.168.0.10`, `192.168.0.11` and `192.168.0.12`, and planning to remove the la"
"st node `192.168.0.12` from the cluster."
msgstr ""
"ここでは、`192.168.0.10`、`192.168.0.11`、および `192.168.0.12` の3つのreplicaノードからなるDroong"
"aクラスタが存在していて、最後のノード `192.168.0.12` をクラスタから取り除こうとしていると仮定します。"

msgid "### Unjoin an existing replica from the cluster"
msgstr "### 既存のreplicaをクラスタから分離する"

msgid ""
"To remove a replica from an existing cluster, you just have to update the \"cat"
"alog.json\" with new list of replica nodes except the node to be removed:"
msgstr ""
"既存のクラスタからreplicaノードを取り除くには、単に、そのノードを含まないreplicaノードのリストを伴って`catalog.json` を更新する"
"だけでよいです:"

msgid ""
"    (on 192.168.0.10)\n"
"    # droonga-engine-catalog-generate --hosts=192.168.0.10,192.168.0.11 \\\n"
"                                      --output=~/droonga/catalog.json"
msgstr ""

msgid ""
" * The existing cluster \"charlie\" including three replicas.\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
"   * `192.168.0.12`\n"
" * The new cluster including two replicas.\n"
"   Let's give a name *\"delta\"* to it, for now.\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`"
msgstr ""
" * 3つのreplicaを含む既存のクラスタ「charlie」。\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`\n"
"   * `192.168.0.12`\n"
" * 2つのreplicaを含む新しいクラスタ。以下、*「delta」*と仮称します。\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`"

msgid ""
"~~~\n"
"(for the cluster charlie)\n"
"# curl \"http://192.168.0.11:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"# curl \"http://192.168.0.12:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"Because `catalog.json` on nodes `192.168.0.11` and `192.168.0.12` have no chan"
"ge, they still detect three nodes in the cluster charlie."
msgstr ""
"`192.168.0.11` と `192.168.0.12` の `catalog.json` には何も変更がないため、これらのノードは依然としてクラスタ"
" charlie が3つのノードから構成されていると認識しています。"

msgid ""
"On the other hand, the node `192.168.0.10` with new `catalog.json` knows the c"
"luster delta includes only two nodes:"
msgstr ""
"その一方で、新しい `catalog.json` を持つ `192.168.0.10` は、クラスタ delta が2つのノードから構成されている事を知って"
"います:"

msgid ""
"~~~\n"
"(for the cluster delta)\n"
"# curl \"http://192.168.0.10:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"So the node `192.168.0.10` doesn't deliver incoming messages to the missing no"
"de `192.168.0.12` anymore."
msgstr ""
"そのため、ノード `192.168.0.10` へ流入してくるメッセージは、既に存在しないものと認識されているノード `192.168.0.12` へは決し"
"て配送されません。"

msgid "Next, copy new `catalog.json` from `192.168.0.10` to others."
msgstr "次に、新しい `catalog.json` を `192.168.0.10` から他のノードへコピーします。"

msgid ""
"    (on 192.168.0.10)\n"
"    # scp ~/droonga/catalog.json 192.168.0.11:~/droonga/\n"
"    # scp ~/droonga/catalog.json 192.168.0.12:~/droonga/"
msgstr ""

msgid "Then there is only one Droonga cluster on this time."
msgstr "この時点で、Droongaクラスタは1つだけ存在する状態となっています。"

msgid ""
" * The new cluster \"delta\" including two replicas.\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`"
msgstr ""
" * 2つのreplicaを含むクラスタ「delta」。\n"
"   * `192.168.0.10`\n"
"   * `192.168.0.11`"

msgid ""
"~~~\n"
"(for the cluster delta)\n"
"# curl \"http://192.168.0.10:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"# curl \"http://192.168.0.11:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"# curl \"http://192.168.0.12:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    },\n"
"    \"192.168.0.11:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"Any incoming request is delivered to member nodes of the cluster delta.\n"
"Because the orphan node `192.168.0.12` is not a member, it never process reque"
"sts by self."
msgstr ""
"流入してきたリクエストはクラスタ delta の各ノードに届けられますが、孤立したノード `192.168.0.12` はもはやクラスタの一員ではないため、"
"リクエストを自分自身で処理する事はありません。"

msgid ""
"OK, the node is ready to be removed.\n"
"Stop servers and shutdown it if needed."
msgstr ""
"これで、ノードを取り除く準備ができました。\n"
"必要に応じて、サービスを停止させ、コンピュータを停止させましょう。"

msgid ""
"    (on 192.168.0.12)\n"
"    # kill $(cat ~/droonga/droonga-engine.pid)\n"
"    # kill $(cat ~/droonga/droonga-http-server.pid)"
msgstr ""

msgid "## Replace an existing replica node in a cluster with a new one"
msgstr "## クラスタ内の既存のreplicaノードを新しいreplicaノードで置き換える"

msgid "Replacing of nodes is a combination of those instructions above."
msgstr "ノードの置き換えは、上記の手順の組み合わせで行います。"

msgid ""
"Assume that there is a Droonga cluster constructed with two replica nodes `192"
".168.0.10` and `192.168.0.11`, the node `192.168.0.11` is unstable, and planni"
"ng to replace it with a new node `192.168.0.12`."
msgstr ""
"`192.168.0.10` と `192.168.0.11` の2つのノードからなるDroongaクラスタがあり、ノード `192.168.0.11` の"
"動作が不安定になっていて、これを新しいノード `192.168.0.12` で置き換えようとしていると仮定します。"

msgid ""
"First, remove the unstable node.\n"
"Re-generate `catalog.json` without the node to be removed, and spread it to ot"
"her nodes in the cluster:"
msgstr ""
"まず、不安定になっているノードを取り除きます。\n"
"取り除かれるノードを含まないように `catalog.json` を再作成して、クラスタ内の各ノードに展開します:"

msgid ""
"    (on 192.168.0.10)\n"
"    # droonga-engine-catalog-generate --hosts=192.168.0.10 \\\n"
"                                      --output=~/droonga/catalog.json\n"
"    # scp ~/droonga/catalog.json 192.168.0.11:~/droonga/"
msgstr ""

msgid "After that the node `192.168.0.11` unjoins from the cluster successfully."
msgstr "これで、ノード `192.168.0.11` がクラスタから無事に分離します。"

msgid ""
"Now there is a cluster without the node `192.168.0.11`.\n"
"You can confirm that via the `status` command:"
msgstr ""
"この時点で、ノード `192.168.0.11` を含まないクラスタが存在するという状態になっています。\n"
"これは `status` コマンドで確認できます:"

msgid ""
"~~~\n"
"# curl \"http://192.168.0.10:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.10:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "### Add a new replica"
msgstr "### 新しいreplicaを追加する"

msgid ""
"Next, setup the new replica.\n"
"Construct a temporary cluster with only one node `192.168.0.12`.\n"
"The result of the `status` command will be:"
msgstr ""
"次に、新しいreplicaをセットアップします。\n"
"1つのノード `192.168.0.12` だけを含む仮のクラスタを作ってください。\n"
"`status` コマンドの結果はこのようになります:"

msgid ""
"~~~\n"
"# curl \"http://192.168.0.12:10041/droonga/status\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"192.168.0.12:10031/droonga\": {\n"
"      \"live\": true\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "Then, duplicate data from the existing cluster:"
msgstr "クラスタが複数ある状態ができたら、既存クラスタから新しいクラスタへデータを複製します:"

msgid ""
"    (on 192.168.0.12)\n"
"    # droonga-engine-catalog-generate --hosts=192.168.0.12 \\\n"
"                                      --output=~/droonga/catalog.json\n"
"    # drndump --host=192.168.0.10 \\\n"
"              --receiver-host=192.168.0.12 | \\\n"
"        droonga-request --host=192.168.0.12 \\\n"
"                        --receiver-host=192.168.0.12"
msgstr ""

msgid ""
"After the duplication successfully finished, the node is ready to join the clu"
"ster.\n"
"Re-generate `catalog.json` and spread it to all nodes in the cluster:"
msgstr ""
"データの複製が完了したら、ノードをクラスタに参加させる準備は完了です。\n"
"`catalog.json` を再作成し、クラスタ内のすべてのノードにそれを複製します:"

msgid ""
"    (on 192.168.0.12)\n"
"    # droonga-engine-catalog-generate --hosts=192.168.0.10,192.168.0.12 \\\n"
"                                      --output=~/droonga/catalog.json\n"
"    # scp ~/droonga/catalog.json 192.168.0.10:~/droonga/"
msgstr ""

msgid ""
"Finally a Droonga cluster constructed with two nodes `192.168.0.10` and `192.1"
"68.0.12` is here."
msgstr "最終的に、`192.168.0.10` と `192.168.0.12` の2つのノードからなるDroongaクラスタができあがりました。"

msgid "## Conclusion"
msgstr "## まとめ"

msgid ""
"In this tutorial, you did add a new replica node to an existing [Droonga][] cl"
"uster.\n"
"Moreover, you did remove an existing replica, and did replace a replica with a"
" new one."
msgstr ""
"このチュートリアルでは、既存の[Droonga][]クラスタに新しいreplicaノードを追加する方法を学びました。\n"
"また、既存のreplicaを取り除く方法と、既存のreplicaを新しいreplicaで置き換える方法も学びました。"

msgid ""
"  [Ubuntu]: http://www.ubuntu.com/\n"
"  [Droonga]: https://droonga.org/\n"
"  [Groonga]: http://groonga.org/\n"
"  [command reference]: ../../reference/commands/"
msgstr ""
