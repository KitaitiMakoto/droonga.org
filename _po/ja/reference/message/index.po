# Japanese translations for PACKAGE package.
# Copyright (C) 2013 THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# Kouhei Sutou <kou@clear-code.com>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-11-20 22:17+0900\n"
"PO-Revision-Date: 2013-12-19 14:53+0900\n"
"Last-Translator: Kouhei Sutou <kou@clear-code.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: Message format\n"
"layout: documents\n"
"---"
msgstr ""
"---\n"
"title: メッセージ形式\n"
"layout: documents_ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## Request {#request}"
msgstr "## リクエスト {#request}"

msgid "The basic format of a request message is like following:"
msgstr "リクエストのメッセージの基本的な形式は以下の通りです。"

msgid ""
"    {\n"
"      \"id\"      : \"<ID of the message>\",\n"
"      \"type\"    : \"<Type of the message>\",\n"
"      \"replyTo\" : \"<Route to the receiver>\",\n"
"      \"dataset\" : \"<Name of the target dataset>\",\n"
"      \"body\"    : <Body of the message>\n"
"    }"
msgstr ""
"    {\n"
"      \"id\"      : \"<メッセージの識別子>\",\n"
"      \"type\"    : \"<メッセージの種類>\",\n"
"      \"replyTo\" : \"<レスポンスの受信者へのパス>\",\n"
"      \"dataset\" : \"<対象データセット名>\",\n"
"      \"body\"    : <メッセージ本文>\n"
"    }"

msgid "### `id` {#request-id}"
msgstr ""

msgid ""
"Abstract\n"
": The unique identifier for the message."
msgstr ""
"概要\n"
": そのメッセージの一意な識別子。"

msgid ""
"Value\n"
": An identifier string. You can use any string with any format as you like, if"
" only it is unique. The given id of a request message will be used for the ['i"
"nReplyTo`](#response-inReplyTo) information of its response."
msgstr ""
"値\n"
": 識別子となる文字列。一意でさえあれば、どんな形式のどんな文字列でも指定できます。値は対応するレスポンスの['inReplyTo`](#response-"
"inReplyTo)に使われます。"

msgid ""
"Default value\n"
": Nothing. This is required information."
msgstr "省略時の既定値\n"

msgid "### `type` {#request-type}"
msgstr ""

msgid ""
"Abstract\n"
": The type of the message."
msgstr ""
"概要\n"
": そのメッセージの種類。"

msgid ""
"Value\n"
": A type string of [a command](/reference/commands/)."
msgstr ""
"値\n"
": [コマンド](/ja/reference/commands/)の名前の文字列"

msgid "### `replyTo` {#request-replyTo}"
msgstr ""

msgid ""
"Abstract\n"
": The route to the response receiver."
msgstr ""
"概要\n"
": レスポンスの受信者へのパス。"

msgid ""
"値\n"
": `<ホスト>:<ポート番号>/<タグ名>` で示されたパス文字列。例：`localhost:24224/output`."
msgstr ""

msgid ""
"Default value\n"
": Nothing. This is optional. If you specify no `replyTo`, then the response me"
"ssage will be thrown away."
msgstr ""
"省略時の既定値\n"
": なし。この情報は省略可能で、省略した場合はレスポンスのメッセージは単に捨てられます。"

msgid "### `dataset` {#request-dataset}"
msgstr ""

msgid ""
"Abstract\n"
": The target dataset."
msgstr ""
"概要\n"
": 対象となるデータセット。"

msgid ""
"Value\n"
": A name string of a dataset."
msgstr ""
"値\n"
": データセット名の文字列。"

msgid "### `body` {#request-body}"
msgstr ""

msgid ""
"Abstract\n"
": The body of the message."
msgstr ""
"概要\n"
": メッセージの本文。"

msgid ""
"Value\n"
": Object, string, number, boolean, or `null`."
msgstr ""
"値\n"
": オブジェクト、文字列、数値、真偽値、または `null`。"

msgid ""
"省略時の既定値\n"
": なし。この情報は省略可能です。"
msgstr ""

msgid "## Response {#response}"
msgstr "## レスポンス {#response}"

msgid "The basic format of a response message is like following:"
msgstr "レスポンスのメッセージの基本的な形式は以下の通りです。"

msgid ""
"    {\n"
"      \"type\"       : \"<Type of the message>\",\n"
"      \"inReplyTo\"  : \"<Route to the receiver>\",\n"
"      \"statusCode\" : <Status code>,\n"
"      \"body\"       : <Body of the message>\n"
"    }"
msgstr ""

msgid "### `type` {#response-type}"
msgstr ""

msgid "### `inReplyTo` {#response-inReplyTo}"
msgstr ""

msgid "### `statusCode` {#response-statusCode}"
msgstr ""

msgid "Status codes of responses are similar to HTTP's one."
msgstr "レスポンスのステータスコードはHTTPのステータスコードに似ています。"

msgid ""
"`200` and other `2xx` statuses\n"
": The command is successfully processed."
msgstr ""
"`200` およびその他の `2xx` のステータス\n"
": コマンドが正常に処理されたことを示します。"

msgid "### `body` {#response-body}"
msgstr ""

msgid "## Error response {#error}"
msgstr "## エラーレスポンス {#error}"

msgid "Some commands can return an error response."
msgstr "コマンドの中にはエラーを返す物があります。"

msgid ""
"An error response has the `type` same to a regular response, but it has differ"
"ent `statusCode` and `body`. General type of the error is indicated by the `st"
"atusCode`, and details are reported as the `body`."
msgstr ""
"エラーレスポンスは通常のレスポンスと同じ `type` を伴って返されますが、通常のレスポンスとは異なる `statusCode` と `body` を持ち"
"ます。大まかなエラーの種類は `statusCode` で示され、詳細な情報は `body` の内容として返されます。"

msgid "### Status codes of error responses {#error-status}"
msgstr "### エラーレスポンスのステータスコード {#error-status}"

msgid "Status codes of error responses are similar to HTTP's one."
msgstr "エラーレスポンスのステータスコードはHTTPのステータスコードに似ています。"

msgid ""
"`400` and other `4xx` statuses\n"
": An error of the request message."
msgstr ""
"`400` およびその他の `4xx` のステータス\n"
": リクエストのメッセージが原因でのエラーであることを示します。"

msgid ""
"`500` and other `5xx` statuses\n"
": An internal error of the Droonga Engine."
msgstr ""
"`500` およびその他の `5xx` のステータス\n"
": Droonga Engine内部のエラーであることを示します。"

msgid "### Body of error responses {#error-body}"
msgstr "### エラーレスポンスの `body` {#error-body}"

msgid "The basic format of the body of an error response is like following:"
msgstr "エラーレスポンスの `body` の基本的な形式は以下の通りです。"

msgid ""
"    {\n"
"      \"name\"    : \"<Name of the error>\",\n"
"      \"message\" : \"<Human readable details of the error>\",\n"
"      \"detail\"  : <Other extra information for the error, in various formats>\n"
"    }"
msgstr ""

#~ msgid ""
#~ "                                 \\--------------------------------------------------/\n"
#~ "                                       This tutorial describes about this "
#~ "part."
#~ msgstr ""
#~ "                                 \\--------------------------------------------------/\n"
#~ "                                       この部分を構築します"
#~ msgid ""
#~ " * [Install](install/) describes how to install Droonga.\n"
#~ " * [Reference manual](reference/) describes about specifications.\n"
#~ " * [Contribution](contribution/) describes how to contribute Droonga "
#~ "project and join Droonga development.\n"
#~ " * [Related projects](related-projects/) introduces related projects."
#~ msgstr ""
#~ " * [インストール手順](install/)：Droongaのインストール手順の説明です。\n"
#~ " * [リファレンスマニュアル](reference/)：詳細な仕様についての説明です。\n"
#~ " * [コントリビューション](contribution/)：Droongaの開発への参加の仕方、"
#~ "Droongaプロジェクトへの貢献の仕方についての説明です。\n"
#~ " * [関連プロジェクト](related-projects/)：Droongaの関連プロジェクトの紹介"
#~ "です。"
#~ msgid ""
#~ " * [catalog.json](catalog/)\n"
#~ " * [Message format](message/)\n"
#~ " * [Commands](commands/)"
#~ msgstr ""
#~ " * [catalog.json](catalog/)\n"
#~ " * [メッセージの形式](message/)\n"
#~ " * [コマンドリファレンス](commands/)"
#~ msgid "## About Droonga"
#~ msgstr "## Droongaについて"
#~ msgid "## Abstract"
#~ msgstr "## 概要"
#~ msgid "## Abstract of the system described in this tutorial"
#~ msgstr "## チュートリアルでつくるシステムの全体像"
#~ msgid "## Build a Droonga engine"
#~ msgstr "## Droonga Engine を構築する"
#~ msgid "## Build a protocol adapter"
#~ msgstr "## Protocol Adapter を構築する"
#~ msgid "## Conclusion"
#~ msgstr "## まとめ"
#~ msgid "## Documentations"
#~ msgstr "## ドキュメント"
#~ msgid "## Getting started"
#~ msgstr "## 使ってみよう"
#~ msgid "## Install packages required for the setup process"
#~ msgstr "## セットアップに必要なパッケージをインストールする"
#~ msgid "## Precondition"
#~ msgstr "## 前提条件"
#~ msgid "## Prepare an environment for experiments"
#~ msgstr "## 実験用のマシンを用意する"
#~ msgid "## The goal of this tutorial"
#~ msgstr "## チュートリアルのゴール"
#~ msgid "## The latest news"
#~ msgstr "## 最新情報"
#~ msgid "### Asynchronous search request via Socket.IO"
#~ msgstr "### Socket.IO を用いた非同期処理"
#~ msgid "### Components of the Droonga"
#~ msgstr "### Droonga を構成するコンポーネント"
#~ msgid "### Create a database"
#~ msgstr "### データベースを作成する"
#~ msgid "### Create a protocol adapter"
#~ msgstr "### Protocol Adapter を作成する"
#~ msgid "### Install a express-droonga"
#~ msgstr "### express-droonga をインストールする"
#~ msgid "### Install a fluent-plugin-droonga"
#~ msgstr "### fluent-plugin-droonga をインストールする"
#~ msgid "### Prepare a configuration file to start a Droonga engine"
#~ msgstr "### Droonga Engine を起動するための設定ファイルを用意する"
#~ msgid "### Start an instance of fluent-plugin-droonga"
#~ msgstr "### fluent-plugin-droonga を起動する"
#~ msgid "### Synchronous search request via HTTP"
#~ msgstr "### HTTPでの同期的な検索のリクエスト"
#~ msgid "### What is the Droonga?"
#~ msgstr "### Droonga とは"
#~ msgid ""
#~ "* You must have basic knowledges and experiences how setup and operate an "
#~ "[Ubuntu][] Server.\n"
#~ "* You must have basic knowledges and experiences to develop applications "
#~ "based on the [Ruby][] and the [Node.js][]."
#~ msgstr ""
#~ "* [Ubuntu][] Server を自分でセットアップしたり、基本的な操作ができること\n"
#~ "* [Ruby][] と [Node.js][] の基本的な知識があること"
#~ msgid ""
#~ "---\n"
#~ "layout: default\n"
#~ "---"
#~ msgstr ""
#~ "---\n"
#~ "layout: default_ja\n"
#~ "---"
#~ msgid ""
#~ "---\n"
#~ "title: Droonga tutorial\n"
#~ "layout: documents\n"
#~ "---"
#~ msgstr ""
#~ "---\n"
#~ "title: Droonga チュートリアル\n"
#~ "layout: documents_ja\n"
#~ "---"
#~ msgid ""
#~ "---\n"
#~ "title: Reference manuals\n"
#~ "layout: documents\n"
#~ "---"
#~ msgstr ""
#~ "---\n"
#~ "title: リファレンス\n"
#~ "layout: documents_ja\n"
#~ "---"
#~ msgid ""
#~ "<div class=\"jumbotron\">\n"
#~ "<h1>Droonga</h1>\n"
#~ "<p>A scalable data processing engine</p>\n"
#~ "<p><a class=\"btn btn-primary btn-lg\" role=\"button\" href=\"overview/"
#~ "\">Learn more »</a></p>\n"
#~ "</div>"
#~ msgstr ""
#~ "<div class=\"jumbotron\">\n"
#~ "<h1>Droonga</h1>\n"
#~ "<p>スケーラブルなデータ処理エンジン</p>\n"
#~ "<p><a class=\"btn btn-primary btn-lg\" role=\"button\" href=\"overview/\">"
#~ "詳しく »</a></p>\n"
#~ "</div>"
#~ msgid ""
#~ "A Droonga protocol adapter supports not only REST API, but also [Socket."
#~ "IO][]. If you send a request to a protocol adapter via Socket.IO, then "
#~ "the protocol adapter sends back the response for the request after the "
#~ "operation is finished. So you can develop a system based on a client "
#~ "application and an API server communicating each other asynchronously."
#~ msgstr ""
#~ "Droonga の Protocol Adapter は、 REST API だけでなく、 [Socket.IO][] にも"
#~ "対応しています。Socket.IO 経由で Protocol Adapter へリクエストを送ると、処"
#~ "理が完了した時点で Protocol Adapter から結果を送り返してもらえます。この仕"
#~ "組を利用すると、クライアントアプリケーションと Droonga の間でリクエストと"
#~ "レスポンスを別々に送り合う、非同期な通信を行うことができます。"
#~ msgid ""
#~ "After a Droonga engine is started, let's load data.\n"
#~ "Prepare two jsons files, `ddl.jsons` including the database schema and "
#~ "`stores.jsons` including location data of stores."
#~ msgstr ""
#~ "Dronga Engine が起動したので、データを投入しましょう。\n"
#~ "スキーマを定義した `ddl.jsons` と、店舗のデータ `stores.jsons` を用意しま"
#~ "す。"
#~ msgid ""
#~ "After that, put a file `package.json` like following, into the directory:"
#~ msgstr "以下のような `package.json` を用意します。"
#~ msgid "As the result two stores are found by the search condition."
#~ msgstr "以上 2 件が検索結果として該当することがわかりました。"
#~ msgid ""
#~ "Because the `count` says `40`, you know there are all 40 records in the "
#~ "table. Search result records are returned as an array `records`."
#~ msgstr ""
#~ "`count` の値からデータが全部で 36 件あることがわかります。`records` に配列"
#~ "として検索結果が入っています。"
#~ msgid "Create a directory for a Droonga engine:"
#~ msgstr "まず Droonga Engine 用のディレクトリを作成します。"
#~ msgid ""
#~ "Droonga is a scalable data processing engine. Droonga uses stream "
#~ "oriented processing model. Droonga processes data by pipeline. Many "
#~ "operations such as search, update, group are done in pipeline. The "
#~ "processing model provides flexibility and extensibility. Droonga can also "
#~ "process complex operations by mixing operations. Users can add custom "
#~ "operations to Droonga as Ruby plugins."
#~ msgstr ""
#~ "Droongaは、ストリーム指向の処理モデルを採用したスケーラブルなデータ処理エ"
#~ "ンジンです。検索、更新、集約などの多くの操作がパイプラインを通じて行われる"
#~ "このモデルにより、Droongaは高い柔軟性と拡張性を備えています。また、Droonga"
#~ "は既存操作の組み合わせによる複雑な操作にも対応しています。ユーザーはRubyで"
#~ "プラグインを開発して、独自の操作をDroongaに加える事ができます。"
#~ msgid ""
#~ "For example let's try to build a database system to find [Starbucks "
#~ "stores in New York](http://geocommons.com/overlays/430038)."
#~ msgstr ""
#~ "例として、[ニューヨークにあるのスターバックスの店舗](http://geocommons."
#~ "com/overlays/430038)を検索できるデータベースシステムを作成することにしま"
#~ "す。"
#~ msgid ""
#~ "For more details of the configuration file `catalog.json`, see [the "
#~ "reference manual of catalog.json](/reference/catalog)."
#~ msgstr ""
#~ "`catalog.json` の詳細については [catalog.json](/ja/reference/catalog) を参"
#~ "照してください。"
#~ msgid ""
#~ "In this tutorial, you did setup both packages [fluent-plugin-droonga][] "
#~ "and [express-droonga][] which construct [Droonga][] service on a [Ubuntu "
#~ "Linux][Ubuntu].\n"
#~ "Moreover, you built a search system based on a protocol adapter with a "
#~ "Droonga engine, and successfully searched."
#~ msgstr ""
#~ "[Ubuntu Linux][Ubuntu] 上に [Droonga][] を構成するパッケージである "
#~ "[fluent-plugin-droonga][] と [express-droonga][] をセットアップしまし"
#~ "た。\n"
#~ "これらのパッケージを利用することで、Protocol Adapter と Droonga Engine か"
#~ "らなるシステムを構築し、実際に検索を行いました。"
#~ msgid "Install depending packages."
#~ msgstr "必要なパッケージをインストールします。"
#~ msgid "Install packages required to setup a Droonga engine."
#~ msgstr ""
#~ "Droonga をセットアップするために必要になるパッケージをインストールします。"
#~ msgid ""
#~ "It is a data processing engine based on a distributed architecture, named "
#~ "after the terms \"distributed-Groonga\"."
#~ msgstr "分散データ処理エンジンです。 \"distributed-groonga\" に由来します。"
#~ msgid "Learning steps to setup a Droonga based search system by yourself."
#~ msgstr "Droonga を使った検索システムを自分で構築できるようになる。"
#~ msgid ""
#~ "Let's use the `express-droonga` to build a protocol adapter. It is an npm "
#~ "package for the Node.js."
#~ msgstr ""
#~ "Protocol Adapter を構築するために、 `express-droonga` を使用します。 "
#~ "`express-droonga` は、Node.js のパッケージです。"
#~ msgid ""
#~ "NOTE: Make sure to use instances with >= 2GB memory equipped, at least "
#~ "during installation of required packages for Droonga. Otherwise, you may "
#~ "experience a strange build error."
#~ msgstr ""
#~ "注意：Droongaが必要とするパッケージをインストールする前に、マシンが2GB以上"
#~ "のメモリを備えていることを確認して下さい。メモリが不足していると、ビルド時"
#~ "にエラーが出て、ビルドに失敗することがあります。"
#~ msgid ""
#~ "Next step, let's try more meaningful query. To search stores which "
#~ "contain \"Columbus\" in their name, give `Columbus` as the parameter "
#~ "`query`, and give `_key` as the parameter `match_to` which means the "
#~ "column to be searched. Then:"
#~ msgstr ""
#~ "もう少し複雑なクエリを試してみましょう。例えば、店名に「Columbus」を含む店"
#~ "舗を検索します。`query` パラメータにクエリ `Columbus` を、`match_to` パラ"
#~ "メータに検索対象として `_key` を指定し、以下のようなリクエストを発行しま"
#~ "す。"
#~ msgid ""
#~ "Next, modify the `application.js` to host the `index.html` by the "
#~ "protocol adapter, like:"
#~ msgstr ""
#~ "では、この `index.html` を Protocol Adapter でホストできるようにするため、"
#~ "`application.js` を以下のように書き換えます。"
#~ msgid ""
#~ "Next, put configuration files `fluentd.conf` and `catalog.json` like "
#~ "following, into the directory:"
#~ msgstr "以下の内容で `fluentd.conf` と `catalog.json` を作成します。"
#~ msgid ""
#~ "Next, try a fulltext search request like the previous section, to find "
#~ "stores with the town name \"Columbus\".\n"
#~ "Modify the parameter given to the `socket.emit()` method in the `index."
#~ "html`, like following:"
#~ msgstr ""
#~ "今度は全文検索を行ってみましょう。先ほどと同様に「Columbus」を店名に含む店"
#~ "舗を検索します。`index.html` の `socket.emit()` の呼び出しを書き換え、以下"
#~ "の様な `index.html` を用意します。"
#~ msgid ""
#~ "Now a Droonga engine for searching Starbucks stores database is ready.\n"
#~ "Next, setup a protocol adapter for clients to accept search requests "
#~ "using popular protocols."
#~ msgstr ""
#~ "これで、スターバックスの店舗のデータベースを検索するための Droonga Engine "
#~ "ができました。\n"
#~ "引き続き Protocol Adapter を構築して、検索リクエストを受け付けられるように"
#~ "しましょう。"
#~ msgid "Now, let's create such a system based on Socket.IO."
#~ msgstr ""
#~ "ここでは、Webブラウザを「クライアントアプリケーション」とし、Protocol "
#~ "Adapter との間で Socket.IO を利用して通信するアプリケーションを作成してみ"
#~ "ましょう。"
#~ msgid ""
#~ "OK, you've successfully created a client application which can send "
#~ "search requests and receive responses asynchronously via Socket.IO."
#~ msgstr ""
#~ "このように、Socket.IO を利用して、リクエストとレスポンスを非同期に送受信す"
#~ "る検索クライアントを作成することができました。"
#~ msgid ""
#~ "Open another terminal to keep the fluentd server working, and send those "
#~ "two jsons `ddl.jsons` and `stores.jsons` to the fluentd server:"
#~ msgstr ""
#~ "fluentd を起動した状態で別の端末を開き、以下のようにして `ddl.jsons` と "
#~ "`stores.jsons` を投入します:"
#~ msgid ""
#~ "Prepare a computer at first. This tutorial describes steps to develop a "
#~ "search service based on the Droonga, on an existing computer.\n"
#~ "Following instructions are basically written for a successfully prepared "
#~ "virtual machine of the `Ubuntu 13.10 x64` on the service [DigitalOcean]"
#~ "(https://www.digitalocean.com/), with an available console."
#~ msgstr ""
#~ "まずコンピュータを調達しましょう。このチュートリアルでは、既存のコンピュー"
#~ "タにDroongaによる検索システムを構築する手順を解説します。\n"
#~ "以降の説明は基本的に、[DigitalOcean](https://www.digitalocean.com/)で "
#~ "`Ubuntu 13.10 x64` の仮想マシンのセットアップを完了し、コンソールにアクセ"
#~ "スできる状態になった後を前提として進めます。"
#~ msgid "Put a file `application.js` like following, into the directory:"
#~ msgstr "以下のような内容で `application.js` を作成します。"
#~ msgid ""
#~ "Reload the current page `http://192.0.2.1:3000` in your Web browser, then "
#~ "you'll see a search result like following:"
#~ msgstr ""
#~ "ブラウザで再度 `http://192.0.2.1:3000` を開くと、以下のような検索結果が表"
#~ "示されます。"
#~ msgid ""
#~ "Required packages are prepared by the command above. Let's continue to "
#~ "the configuration step."
#~ msgstr ""
#~ "Droonga Engine を構築するのに必要なパッケージがセットアップできました。引"
#~ "き続き設定に移ります。"
#~ msgid "See [overview](overview/) for more details."
#~ msgstr "詳細は[概要](overview/)をご覧ください。"
#~ msgid "See [roadmap](roadmap/) for the future Droonga."
#~ msgstr "将来のDroongaについては[ロードマップ](roadmap/)をご覧ください。"
#~ msgid ""
#~ "Start a Droonga engine, it is a fluentd server with fluentd-plugin-"
#~ "droonga started like:"
#~ msgstr "以下のようにして fluentd-plugin-droonga を起動します。"
#~ msgid ""
#~ "The Droonga is built on some components which are made as separated "
#~ "packages. You can develop various data processing systems (for example, a "
#~ "fulltext search engine) with high scalability from a distributed "
#~ "architecture, with those packages."
#~ msgstr ""
#~ "Droonga は複数のコンポーネントから構成されています。ユーザは、これらのパッ"
#~ "ケージを組み合わせて利用することで、全文検索をはじめとするスケーラブルな分"
#~ "散データ処理システムを構築することができます。"
#~ msgid ""
#~ "The component \"Droonga Engine\" is the main part to process data with a "
#~ "distributed architecture. It is triggered by requests and processes "
#~ "various data."
#~ msgstr ""
#~ "Droonga Engine は Droonga における分散データ処理の要となるコンポーネントで"
#~ "す。リクエストに基いて実際のデータ処理を行います。"
#~ msgid ""
#~ "The component \"Protocol Adapter\" provides ability for clients to "
#~ "communicate with a Droonga engine, using various protocols."
#~ msgstr ""
#~ "Protocol Adapter は、Droonga を様々なプロトコルで利用できるようにするため"
#~ "のアダプタです。"
#~ msgid ""
#~ "The first argument `'search'` for the method call `socket.emit()` means "
#~ "that the request is a search request.\n"
#~ "The second argument includes parameters of the search request. See the "
#~ "command reference of the [`search` command](/reference/commands/search) "
#~ "for more details.\n"
#~ "(By the way, we used a REST API to do search in the previous section. In "
#~ "the case the protocol adapter translates a HTTP request to a message in "
#~ "the format described in the [command reference of the `search`](/"
#~ "reference/commands/search) internally and sends it to the Droonga engine.)"
#~ msgstr ""
#~ "`socket.emit()` の第1引数 `'search'` は、このリクエストが検索リクエストで"
#~ "あることを指定しています。\n"
#~ "第2引数でどのような検索を行うかを指定しています。\n"
#~ "詳しくは [search](/ja/reference/commands/search) を参照してください。\n"
#~ "ところで、前のセクションでは、REST API を利用して検索を行いました。\n"
#~ "REST API を利用した場合は、 `express-droonga` が内部で REST リクエストから"
#~ "上記の形式のメッセージへと変換し、`fluent-plugin-droonga` に送信するように"
#~ "なっています。"
#~ msgid ""
#~ "The following documentations will help you to use Droonga more "
#~ "effectively:"
#~ msgstr ""
#~ "Droongaをより効果的に使うために、以下のドキュメントが役立つでしょう。"
#~ msgid ""
#~ "The only one available protocol of a Droonga engine is the fluentd "
#~ "protocol. Instead, a protocol adapter provides various interfaces, HTTP, "
#~ "Socket.IO, and so on, for applications, between them and a Droonga engine."
#~ msgstr ""
#~ "Droonga Engine は fluentd プロトコルで通信を行います。Protocol Adapter "
#~ "は、ユーザがアプリケーションを構築する際に利用しやすいよう、 Droonga "
#~ "Engine の機能を HTTP や Socket.IO などのインタフェースで提供します。"
#~ msgid ""
#~ "The part \"Droonga engine\" stores the database and provides the search "
#~ "feature actually.\n"
#~ "In this section we install a fluent-plugin-droonga and load searchable "
#~ "data to the database."
#~ msgstr ""
#~ "Droonga Engine は、データベースを保持し、実際の検索を担当する部分です。\n"
#~ "このセクションでは、 fluent-plugin-droonga をインストールし、検索対象とな"
#~ "るデータを準備します。"
#~ msgid ""
#~ "The sample client application is a simple Web page `index.html` loaded in "
#~ "a Web browser, returned by the protocol adapter itself.\n"
#~ "Put a file `index.html` into the `protocol-adaptor` directory, like "
#~ "following:"
#~ msgstr ""
#~ "Protocol Adapter から `index.html` を配信し、Webブラウザに渡すことにしま"
#~ "しょう。\n"
#~ "`protocol-adapter` ディレクトリの下に以下の内容の `index.html` を配置しま"
#~ "す。"
#~ msgid "Then, run the `application.js`."
#~ msgstr "`application.js` を実行します。"
#~ msgid ""
#~ "Then, type the IP address of the server for experiments into the address "
#~ "bar of your Web browser. For example, if the IP address is `192.0.2.1`, "
#~ "then the location is `http://192.0.2.1:3000/` and you can see the "
#~ "contents of the `index.html`. When you see the search result like "
#~ "following, then the search request is successfully processed:"
#~ msgstr ""
#~ "Web ブラウザにサーバの IP アドレスを入れて、リクエストを送信してみましょ"
#~ "う。\n"
#~ "以降、サーバの IP アドレスが `192.0.2.1` であったとします。\n"
#~ "`http://192.0.2.1:3000/` をリクエストすると、先の `index.html` が返される"
#~ "ようになります。\n"
#~ "Webブラウザから `http://192.0.2.1:3000` を開いてみてください。以下のように"
#~ "検索結果が表示されれば成功です。"
#~ msgid ""
#~ "This `catalog.json` defines a dataset `Starbucks` with two replicas and "
#~ "two partitions.\n"
#~ "All of replicas and partitions are stored locally (in other words, they "
#~ "are managed by a `fluent-plugin-droonga` instance)."
#~ msgstr ""
#~ "この `catalog.json` では、 `Starbucks` データセットを定義し、2組のレプリカ"
#~ "×2個のパーティションで構成するよう指示しています。\n"
#~ "この例では、全てのレプリカ及びパーティションは、ローカル(一つの `fluent-"
#~ "plugin-droonga` の管理下)に配置します。"
#~ msgid ""
#~ "This client sends a search query by `socket.emit()`. After the request is "
#~ "processed and the result is returned, the callback given as `socket.on"
#~ "('search.result', ...)` will be called with the result, and it will "
#~ "render the result to the page."
#~ msgstr ""
#~ "`socket.emit()` でクエリを送信します。クエリの処理が完了し、結果が戻ってく"
#~ "ると、 `socket.on('search.result', ...)` のコールバックが呼ばれ、ページ内"
#~ "にその結果が表示されます。"
#~ msgid ""
#~ "This component is developed as a [Fluentd] plugin, and released as the "
#~ "[fluent-plugin-droonga][] package.\n"
#~ "It internally uses [Groonga][] as its search engine. Groonga is an open "
#~ "source, fulltext search engine, including a column-store feature."
#~ msgstr ""
#~ "このコンポーネントは [Fluentd] のプラグインとして実装されており、 [fluent-"
#~ "plugin-droonga][] パッケージとして提供されます。\n"
#~ "[fluent-plugin-droonga][] は検索エンジンとして、オープンソースのカラムスト"
#~ "ア機能付き全文検索エンジン [Groonga][] を使用しています。"
#~ msgid ""
#~ "This component is developed as a module for the [Node.js][], and released "
#~ "as the [express-droonga][] package."
#~ msgstr ""
#~ "このコンポーネントは [Node.js][] のパッケージとして実装されており、"
#~ "[express-droonga][] パッケージとして提供されます。"
#~ msgid "This tutorial describes steps to build a system like following:"
#~ msgstr "チュートリアルでは、以下の様な構成のシステムを構築します。"
#~ msgid ""
#~ "Try [tutorial](tutorial/) to know about Droonga after you understand "
#~ "about Droonga. If you don't read [overview](overview/) yet, read it "
#~ "before trying the tutorial."
#~ msgstr ""
#~ "Droongaについて知った後は、さらに理解を深めるために[チュートリアル]"
#~ "(tutorial/)を試してみて下さい。もしまだ[概要](overview/)を読んでいないよう"
#~ "であれば、チュートリアルを始める前にそちらに目を通しておく事をお薦めしま"
#~ "す。"
#~ msgid ""
#~ "User agents (ex. a Web browser) sends search requests to a protocol "
#~ "adapter. The adapter receives them, and sends internal (translated) "
#~ "search requests to a Droonga engine. The engine processes them actually. "
#~ "Search results are sent from the engine to the protocol adapter, and "
#~ "finally delivered to the user agent."
#~ msgstr ""
#~ "ユーザは Protocol Adapter に、Web ブラウザなどを用いて接続します。"
#~ "Protocol Adapter は Droonga Engine へリクエストを送信します。実際の検索処"
#~ "理は Droonga Engine が行います。検索結果は、Droonga Engine から Protocol "
#~ "Adapter に渡され、最終的にユーザに返ります。"
#~ msgid ""
#~ "We're all set. Let's send a search request to the protocol adapter via "
#~ "HTTP. At first, try to get all records of the `Stores` table by a request "
#~ "like following. (Note: The `attributes=_key` parameter means \"export the "
#~ "value of the column `_key` to the search result\". If you don't set the "
#~ "parameter, each record returned in the `records` will become just a blank "
#~ "array. You can specify multiple column names by the delimiter `,`. For "
#~ "example `attributes=_key,location` will return both the primary key and "
#~ "the location for each record.)"
#~ msgstr ""
#~ "準備が整いました。 Protocol Adapter に向けて HTTP 経由でリクエストを発行"
#~ "し、データベースに問い合わせを行ってみましょう。まずは `Shops` テーブルの"
#~ "中身を取得してみます。以下のようなリクエストを用います。"
#~ "(`attributes=_key` を指定しているのは「検索結果に `_key` 値を含めて返して"
#~ "ほしい」という意味です。これがないと、`records` に何も値がないレコードが"
#~ "返ってきてしまいます。`attributes` パラメータには `,` 区切りで複数の属性を"
#~ "指定することができます。`attributes=_key,location` と指定することで、緯度"
#~ "経度もレスポンスとして受け取ることができます)"
#~ msgid ""
#~ "Your Web browser sends a request to the protocol adapter via Socket.IO, "
#~ "the protocol adapter sends it to the Droonga engine via fluent protocol, "
#~ "the engine returns the search result to the protocol adapter, and the "
#~ "protocol adapter sends back the search result to the client."
#~ msgstr ""
#~ "Web ブラウザから Socket.IO 経由でリクエストが Protocol Adapter に送信さ"
#~ "れ、それが Engine に送られ、検索結果が Protocol Adapter に返され、さらに "
#~ "Web ブラウザに返されます。"
