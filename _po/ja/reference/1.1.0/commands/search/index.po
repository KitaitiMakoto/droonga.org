msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-11-30 23:19+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: search\n"
"layout: en\n"
"---"
msgstr ""

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## Abstract {#abstract}"
msgstr ""

msgid ""
"The `search` command finds records from the specified table based on given con"
"ditions, and returns found records and/or related information."
msgstr ""

msgid ""
"This is designed as the most basic (low layer) command on Droonga, to search i"
"nformation from a database. When you want to add a new plugin including \"searc"
"h\" feature, you should develop it as just a wrapper of this command, instead o"
"f developing something based on more low level technologies."
msgstr ""

msgid "## API types {#api-types}"
msgstr ""

msgid "### HTTP {#api-types-http}"
msgstr ""

msgid ""
"Request endpoint\n"
": `(Document Root)/droonga/search`"
msgstr ""

msgid ""
"Request methd\n"
": `POST`"
msgstr ""

msgid ""
"Request URL parameters\n"
": Nothing."
msgstr ""

msgid ""
"Request body\n"
": A hash of [parameters](#parameters)."
msgstr ""

msgid ""
"Response body\n"
": A [response message](#response)."
msgstr ""

msgid "### REST {#api-types-rest}"
msgstr ""

msgid ""
"Request endpoint\n"
": `(Document Root)/tables/(table name)`"
msgstr ""

msgid ""
"Request methd\n"
": `GET`"
msgstr ""

msgid ""
"Request URL parameters\n"
": They are applied to corresponding [parameters](#parameters):"
msgstr ""

msgid ""
"   * `query`: A string, applied to [`(root).(table name).condition.query`](#us"
"age-condition-query-syntax).\n"
"   * `match_to`: A comma-separated string, applied to [`(root).(table name).co"
"ndition.matchTo`](#usage-condition-query-syntax).\n"
"   * `sort_by`: A comma-separated string, applied to [`(root).(table name).sor"
"tBy`](#query-sortBy).\n"
"   * `attributes`: A comma-separated string, applied to [`(root).(table name)."
"output.attributes`](#query-output).\n"
"   * `offset`: An integer, applied to [`(root).(table name).output.offset`](#q"
"uery-output).\n"
"   * `limit`: An integer, applied to [`(root).(table name).output.limit`](#que"
"ry-output).\n"
"   * `timeout`: An integer, applied to [`(root).timeout`](#parameter-timeout)."
msgstr ""

msgid ""
"<!--\n"
"   * `group_by[(column name)][key]`: A string, applied to [`(root).(column nam"
"e).groupBy.key`](#query-groupBy).\n"
"   * `group_by[(column name)][max_n_sub_records]`: An integer, applied to [`(r"
"oot).(column name).groupBy.maxNSubRecords`](#query-groupBy).\n"
"   * `group_by[(column name)][attributes]`: A comma-separated string, applied "
"to [`(root).(column name).output.attributes`](#query-output).\n"
"   * `group_by[(column name)][attributes][(attribute name)][source]`: A string"
", applied to [`(root).(column name).output.attributes.(attribute name).source`"
"](#query-output).\n"
"   * `group_by[(column name)][attributes][(attribute name)][attributes]`: A co"
"mma-separated string, applied to [`(root).(column name).output.attributes.(att"
"ribute name).attributes`](#query-output).\n"
"   * `group_by[(column name)][limit]`: An integer, applied to [`(root).(column"
" name).output.limit`](#query-output).\n"
"-->"
msgstr ""

msgid "  For example:"
msgstr ""

msgid "   * `/tables/Store?query=NY&match_to=_key&attributes=_key,*&limit=10`"
msgstr ""

msgid ""
"<!--\n"
"   * `/tables/Store?query=NY&match_to=_key&attributes=_key,*&limit=10&group_by"
"[location][key]=location&group_by[location][limit]=5&group_by[location][attrib"
"utes]=_key,_nsubrecs`\n"
"   * `/tables/Store?query=NY&match_to=_key&attributes=_key,*&limit=10&group_by"
"[location][key]=location&group_by[location][limit]=5&group_by[location][attrib"
"utes][_key][souce]=_key&group_by[location][attributes][_nsubrecs][souce]=_nsub"
"recs`\n"
"   * `/tables/Store?query=NY&match_to=_key&limit=0&group_by[location][key]=loc"
"ation&group_by[location][max_n_sub_records]=5&group_by[location][limit]=5&grou"
"p_by[location][attributes][sub_records][source]=_subrecs&group_by[location][at"
"tributes][sub_records][attributes]=_key,location`\n"
"-->"
msgstr ""

msgid ""
"Request body\n"
": Nothing."
msgstr ""

msgid "### Fluentd {#api-types-fluentd}"
msgstr ""

msgid ""
"Style\n"
": Request-Response. One response message is always returned per one request."
msgstr ""

msgid ""
"`type` of the request\n"
": `search`"
msgstr ""

msgid ""
"`body` of the request\n"
": A hash of [parameters](#parameters)."
msgstr ""

msgid ""
"`type` of the response\n"
": `search.result`"
msgstr ""

msgid "## Parameter syntax {#syntax}"
msgstr ""

msgid ""
"    {\n"
"      \"timeout\" : <Seconds to be timed out>,\n"
"      \"queries\" : {\n"
"        \"<Name of the query 1>\" : {\n"
"          \"source\"    : \"<Name of a table or another query>\",\n"
"          \"condition\" : <Search conditions>,\n"
"          \"sortBy\"    : <Sort conditions>,\n"
"          \"groupBy\"   : <Group conditions>,\n"
"          \"output\"    : <Output conditions>\n"
"        },\n"
"        \"<Name of the query 2>\" : { ... },\n"
"        ...\n"
"      }\n"
"    }"
msgstr ""

msgid "## Usage {#usage}"
msgstr ""

msgid ""
"This section describes how to use this command, via a typical usage with follo"
"wing table:"
msgstr ""

msgid "Person table (with primary key):"
msgstr ""

msgid ""
"|_key|name|age|sex|job|note|\n"
"|Alice Arnold|Alice Arnold|20|female|announcer||\n"
"|Alice Cooper|Alice Cooper|30|male|musician||\n"
"|Alice Miller|Alice Miller|25|female|doctor||\n"
"|Bob Dole|Bob Dole|42|male|lawer||\n"
"|Bob Cousy|Bob Cousy|38|male|basketball player||\n"
"|Bob Wolcott|Bob Wolcott|36|male|baseball player||\n"
"|Bob Evans|Bob Evans|31|male|driver||\n"
"|Bob Ross|Bob Ross|54|male|painter||\n"
"|Lewis Carroll|Lewis Carroll|66|male|writer|the author of Alice's Adventures i"
"n Wonderland|"
msgstr ""

msgid "Note: `name` and `note` are indexed with `TokensBigram`."
msgstr ""

msgid "### Basic usage {#usage-basic}"
msgstr ""

msgid "This is a simple example to output all records of the Person table:"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\" : \"Person\",\n"
"            \"output\" : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"_key\", \"*\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"people\" : {\n"
"             \"count\" : 9,\n"
"             \"records\" : [\n"
"               [\"Alice Arnold\", \"Alice Arnold\", 20, \"female\", \"announcer\", \"\"]"
",\n"
"               [\"Alice Cooper\", \"Alice Cooper\", 30, \"male\", \"musician\", \"\"],\n"
"               [\"Alice Miller\", \"Alice Miller\", 25, \"male\", \"doctor\", \"\"],\n"
"               [\"Bob Dole\", \"Bob Dole\", 42, \"male\", \"lawer\", \"\"],\n"
"               [\"Bob Cousy\", \"Bob Cousy\", 38, \"male\", \"basketball player\", \"\"]"
",\n"
"               [\"Bob Wolcott\", \"Bob Wolcott\", 36, \"male\", \"baseball player\", \""
"\"],\n"
"               [\"Bob Evans\", \"Bob Evans\", 31, \"male\", \"driver\", \"\"],\n"
"               [\"Bob Ross\", \"Bob Ross\", 54, \"male\", \"painter\", \"\"],\n"
"               [\"Lewis Carroll\", \"Lewis Carroll\", 66, \"male\", \"writer\",\n"
"                \"the author of Alice's Adventures in Wonderland\"]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"The name `people` is a temporary name for the search query and its result.\n"
"A response of a `search` command will be returned as a hash, and the keys are "
"same to keys of the given `queries`.\n"
"So, this means: \"name the search result of the query as `people`\"."
msgstr ""

msgid "Why the command above returns all informations of the table? Because:"
msgstr ""

msgid ""
" * There is no search condition. This command matches all records in the speci"
"fied table, if no condition is specified.\n"
" * [`output`](#query-output)'s `elements` contains `records` (and `count`) col"
"umn(s). The parameter `elements` controls the returned information. Matched re"
"cords are returned as `records`, the total number of matched records are retur"
"ned as `count`.\n"
" * [`output`](#query-output)'s `limit` is `-1`. The parameter `limit` controls"
" the number of returned records, and `-1` means \"return all records\".\n"
" * [`output`](#query-output)'s `attributes` contains two values `\"_key\"` and `"
"\"*\"`. They mean \"all columns of the Person table, including the `_key`\" and it"
" equals to `[\"_key\", \"name\", \"age\", \"sex\", \"job\", \"note\"]` in this case. The p"
"arameter `attributes` controls which columns' value are returned."
msgstr ""

msgid "#### Search conditions {#usage-condition}"
msgstr ""

msgid ""
"Search conditions are specified via the `condition` parameter. There are two s"
"tyles of search conditions: \"script syntax\" and \"query syntax\". See [`conditio"
"n` parameter](#query-condition) for more details."
msgstr ""

msgid "##### Search conditions in Script syntax {#usage-condition-script-syntax}"
msgstr ""

msgid ""
"Search conditions in script syntax are similar to ECMAScript. For example, fol"
"lowing query means \"find records that `name` contains `Alice` and `age` is lar"
"ger than or equal to `25`\":"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\"    : \"Person\",\n"
"            \"condition\" : \"name @ 'Alice' && age >= 25\"\n"
"            \"output\"    : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\", \"age\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"people\" : {\n"
"             \"count\" : 2,\n"
"             \"records\" : [\n"
"               [\"Alice Arnold\", 20],\n"
"               [\"Alice Cooper\", 30],\n"
"               [\"Alice Miller\", 25]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"[Script syntax is compatible to Groonga's one](http://groonga.org/docs/referen"
"ce/grn_expr/script_syntax.html). See the linked document for more details."
msgstr ""

msgid "##### Search conditions in Query syntax {#usage-condition-query-syntax}"
msgstr ""

msgid ""
"The query syntax is mainly designed for search boxes in webpages. For example,"
" following query means \"find records that `name` or `note` contain the given w"
"ord, and the word is `Alice`\":"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\"    : \"Person\",\n"
"            \"condition\" : {\n"
"              \"query\"   : \"Alice\",\n"
"              \"matchTo\" : [\"name\", \"note\"]\n"
"            },\n"
"            \"output\"    : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\", \"note\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"people\" : {\n"
"             \"count\" : 4,\n"
"             \"records\" : [\n"
"               [\"Alice Arnold\", \"\"],\n"
"               [\"Alice Cooper\", \"\"],\n"
"               [\"Alice Miller\", \"\"],\n"
"               [\"Lewis Carroll\",\n"
"                \"the author of Alice's Adventures in Wonderland\"]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"[Query syntax is compatible to Groonga's one](http://groonga.org/docs/referenc"
"e/grn_expr/query_syntax.html). See the linked document for more details."
msgstr ""

msgid "#### Sorting of search results {#usage-sort}"
msgstr ""

msgid ""
"Returned records can be sorted by conditions specified as the `sortBy` paramet"
"er. For example, following query means \"sort results by their `age`, in ascend"
"ing order\":"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\"    : \"Person\",\n"
"            \"condition\" : \"name @ 'Alice'\"\n"
"            \"sortBy\"    : [\"age\"],\n"
"            \"output\"    : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\", \"age\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"people\" : {\n"
"             \"count\" : 8,\n"
"             \"records\" : [\n"
"               [\"Alice Arnold\", 20],\n"
"               [\"Alice Miller\", 25],\n"
"               [\"Alice Cooper\", 30]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"If you add `-` before name of columns, then search results are returned in des"
"cending order. For example:"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\"    : \"Person\",\n"
"            \"condition\" : \"name @ 'Alice'\"\n"
"            \"sortBy\"    : [\"-age\"],\n"
"            \"output\"    : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\", \"age\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"people\" : {\n"
"             \"count\" : 8,\n"
"             \"records\" : [\n"
"               [\"Alice Cooper\", 30],\n"
"               [\"Alice Miller\", 25],\n"
"               [\"Alice Arnold\", 20]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid "See [`sortBy` parameter](#query-sortBy) for more details."
msgstr ""

msgid "#### Paging of search results {#usage-paging}"
msgstr ""

msgid ""
"Search results can be retuned partially via `offset` and `limit` under the [`o"
"utput`](#query-output) parameter. For example, following queries will return 2"
"0 or more search results by 10's."
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\" : \"Person\",\n"
"            \"output\" : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\"],\n"
"              \"offset\"     : 0,\n"
"              \"limit\"      : 10\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid "    => returns 10 results from the 1st to the 10th."
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\" : \"Person\",\n"
"            \"output\" : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\"],\n"
"              \"offset\"     : 10,\n"
"              \"limit\"      : 10\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid "    => returns 10 results from the 11th to the 20th."
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\" : \"Person\",\n"
"            \"output\" : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\"],\n"
"              \"offset\"     : 20,\n"
"              \"limit\"      : 10\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid "    => returns 10 results from the 21st to the 30th."
msgstr ""

msgid ""
"The value `-1` is not recommended  for the `limit` parameter, in regular use. "
"It will return too much results and increase traffic loads. Instead `100` or l"
"ess value is recommended for the `limit` parameter. Then you should do paging "
"by the `offset` parameter."
msgstr ""

msgid "See [`output` parameter](#query-output) for more details."
msgstr ""

msgid ""
"Moreover, you can do paging via [the `sortBy` parameter](#query-sortBy-hash) a"
"nd it will work faster than the paging by the `output` parameter. You should d"
"o paging via the `sortBy` parameter instead of `output` as much as possible."
msgstr ""

msgid "#### Output format {#usage-format}"
msgstr ""

msgid ""
"Search result records in examples above are shown as arrays of arrays, but the"
"y can be returned as arrays of hashes by the [`output`](#query-output)'s `form"
"at` parameter. If you specify `complex` for the `format`, then results are ret"
"urned like:"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\" : \"Person\",\n"
"            \"output\" : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"_key\", \"name\", \"age\", \"sex\", \"job\", \"note\"],\n"
"              \"limit\"      : 3,\n"
"              \"format\"     : \"complex\"\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"people\" : {\n"
"             \"count\" : 9,\n"
"             \"records\" : [\n"
"               { \"_key\" : \"Alice Arnold\",\n"
"                 \"name\" : \"Alice Arnold\",\n"
"                 \"age\"  : 20,\n"
"                 \"sex\"  : \"female\",\n"
"                 \"job\"  : \"announcer\",\n"
"                 \"note\" : \"\" },\n"
"               { \"_key\" : \"Alice Cooper\",\n"
"                 \"name\" : \"Alice Cooper\",\n"
"                 \"age\"  : 30,\n"
"                 \"sex\"  : \"male\",\n"
"                 \"job\"  : \"musician\",\n"
"                 \"note\" : \"\" },\n"
"               { \"_key\" : \"Alice Miller\",\n"
"                 \"name\" : \"Alice Miller\",\n"
"                 \"age\"  : 25,\n"
"                 \"sex\"  : \"female\",\n"
"                 \"job\"  : \"doctor\",\n"
"                 \"note\" : \"\" }\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"Search result records will be returned as an array of hashes, when you specify"
" `complex` as the value of the `format` parameter.\n"
"Otherwise - `simple` or nothing is specified -, records are returned as an arr"
"ay of arrays."
msgstr ""

msgid ""
"See [`output` parameters](#query-output) and [responses](#response) for more d"
"etails."
msgstr ""

msgid "### Advanced usage {#usage-advanced}"
msgstr ""

msgid "#### Grouping {#usage-group}"
msgstr ""

msgid ""
"You can group search results by a column, via the [`groupBy`](#query-groupBy) "
"parameters. For example, following query returns a result grouped by the `sex`"
" column, with the count of original search results:"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"sexuality\" : {\n"
"            \"source\"  : \"Person\",\n"
"            \"groupBy\" : \"sex\",\n"
"            \"output\"  : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"_key\", \"_nsubrecs\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"sexuality\" : {\n"
"             \"count\" : 2,\n"
"             \"records\" :\n"
"               [\"female\", 2],\n"
"               [\"male\", 7]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"The result means: \"There are two `female` records and seven `male` records, mo"
"reover there are two types for the column `sex`."
msgstr ""

msgid ""
"You can also extract the ungrouped record by the `maxNSubRecords` parameter an"
"d the `_subrecs` virtual column. For example, following query returns the resu"
"lt grouped by `sex` and extract two ungrouped records:"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"sexuality\" : {\n"
"            \"source\"  : \"Person\",\n"
"            \"groupBy\" : {\n"
"              \"keys\"           : \"sex\",\n"
"              \"maxNSubRecords\" : 2\n"
"            },\n"
"            \"output\"  : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\n"
"                \"_key\",\n"
"                \"_nsubrecs\",\n"
"                { \"label\"      : \"subrecords\",\n"
"                  \"source\"     : \"_subrecs\",\n"
"                  \"attributes\" : [\"name\"] }\n"
"              ],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"sexuality\" : {\n"
"             \"count\" : 2,\n"
"             \"records\" :\n"
"               [\"female\", 2, [[\"Alice Arnold\"], [\"Alice Miller\"]]],\n"
"               [\"male\",   7, [[\"Alice Cooper\"], [\"Bob Dole\"]]]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid "See [`groupBy` parameters](#query-groupBy) for more details."
msgstr ""

msgid "#### Multiple search queries in one request {#usage-multiple-queries}"
msgstr ""

msgid ""
"Multiple queries can be appear in one `search` command. For example, following"
" query searches people younger than 25 or older than 40:"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"junior\" : {\n"
"            \"source\"    : \"Person\",\n"
"            \"condition\" : \"age <= 25\",\n"
"            \"output\"    : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\", \"age\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          },\n"
"          \"senior\" : {\n"
"            \"source\"    : \"Person\",\n"
"            \"condition\" : \"age >= 40\",\n"
"            \"output\"    : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\", \"age\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"junior\" : {\n"
"             \"count\" : 2,\n"
"             \"records\" : [\n"
"               [\"Alice Arnold\", 20],\n"
"               [\"Alice Miller\", 25]\n"
"             ]\n"
"           },\n"
"           \"senior\" : {\n"
"             \"count\" : 3,\n"
"             \"records\" : [\n"
"               [\"Bob Dole\", 42],\n"
"               [\"Bob Ross\", 54],\n"
"               [\"Lewis Carroll\", 66]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"Each search result can be identified by the temporary name given for each quer"
"y."
msgstr ""

msgid "#### Chained search queries {#usage-chain}"
msgstr ""

msgid ""
"You can specify not only an existing table, but search result of another query"
" also, as the value of the \"source\" parameter. Chained search queries can do f"
"lexible search in just one request."
msgstr ""

msgid ""
"For example, the following query returns two results: records that their `name"
"` contains `Alice`, and results grouped by their `sex` column:"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"people\" : {\n"
"            \"source\"    : \"Person\",\n"
"            \"condition\" : \"name @ 'Alice'\"\n"
"            \"output\"    : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"name\", \"age\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          },\n"
"          \"sexuality\" : {\n"
"            \"source\"  : \"people\",\n"
"            \"groupBy\" : \"sex\",\n"
"            \"output\"  : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"_key\", \"_nsubrecs\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"people\" : {\n"
"             \"count\" : 8,\n"
"             \"records\" : [\n"
"               [\"Alice Cooper\", 30],\n"
"               [\"Alice Miller\", 25],\n"
"               [\"Alice Arnold\", 20]\n"
"             ]\n"
"           },\n"
"           \"sexuality\" : {\n"
"             \"count\" : 2,\n"
"             \"records\" :\n"
"               [\"female\", 2],\n"
"               [\"male\", 1]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid ""
"You can use search queries just internally, without output. For example, the f"
"ollowing query does: 1) group records of the Person table by their `job` colum"
"n, and 2) extract grouped results which have the text `player` in their `job`."
" (*Note: The second query will be done without indexes, so it can be slow.)"
msgstr ""

msgid ""
"    {\n"
"      \"type\" : \"search\",\n"
"      \"body\" : {\n"
"        \"queries\" : {\n"
"          \"allJob\" : {\n"
"            \"source\"  : \"Person\",\n"
"            \"groupBy\" : \"job\"\n"
"          },\n"
"          \"playerJob\" : {\n"
"            \"source\"    : \"allJob\",\n"
"            \"condition\" : \"_key @ `player`\",\n"
"            \"output\"  : {\n"
"              \"elements\"   : [\"count\", \"records\"],\n"
"              \"attributes\" : [\"_key\", \"_nsubrecs\"],\n"
"              \"limit\"      : -1\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    }"
msgstr ""

msgid ""
"    => {\n"
"         \"type\" : \"search.result\",\n"
"         \"body\" : {\n"
"           \"playerJob\" : {\n"
"             \"count\" : 2,\n"
"             \"records\" : [\n"
"               [\"basketball player\", 1],\n"
"               [\"baseball player\", 1]\n"
"             ]\n"
"           }\n"
"         }\n"
"       }"
msgstr ""

msgid "## Parameter details {#parameters}"
msgstr ""

msgid "### Container parameters {#container-parameters}"
msgstr ""

msgid "#### `timeout` {#parameter-timeout}"
msgstr ""

msgid ""
"*Note: This parameter is not implemented yet on the version {{ site.droonga_ve"
"rsion }}."
msgstr "※註：このパラメータはバージョン {{ site.droonga_version }} では未実装です。指定しても機能しません。"

msgid ""
"Abstract\n"
": Threshold to time out for the request."
msgstr ""

msgid ""
"Value\n"
": An integer in milliseconds."
msgstr ""

msgid ""
"Default value\n"
": `10000` (10 seconds)"
msgstr ""

msgid ""
"Droonga Engine will return an error response instead of a search result, if th"
"e search operation take too much time, longer than the given `timeout`.\n"
"Clients may free resources for the search operation after the timeout."
msgstr ""

msgid "#### `queries` {#parameter-queries}"
msgstr ""

msgid ""
"Abstract\n"
": Search queries."
msgstr ""

msgid ""
"Value\n"
": A hash. Keys of the hash are query names, values of the hash are [queries (h"
"ashes of query parameters)](#query-parameters)."
msgstr ""

msgid ""
"Default value\n"
": Nothing. This is a required parameter."
msgstr ""

msgid "You can put multiple search queries in a `search` request."
msgstr ""

msgid ""
"On the {{ site.droonga_version }}, all search results for a request are return"
"ed in one time. In the future, as an optional behaviour, each result can be re"
"turned as separated messages progressively."
msgstr ""
"バージョン {{ site.droonga_version }} ではすべての検索クエリの結果を一度にレスポンスとして返却する動作のみ対応していますが、将来"
"的には、それぞれの検索クエリの結果を分割して受け取る（結果が出た物からバラバラに受け取る）動作にも対応する予定です。"

msgid "### Parameters of each query {#query-parameters}"
msgstr ""

msgid "#### `source` {#query-source}"
msgstr ""

msgid ""
"Abstract\n"
": A source of a search operation."
msgstr ""

msgid ""
"Value\n"
": A name string of an existing table, or a name of another query."
msgstr ""

msgid ""
"You can do a facet search, specifying a name of another search query as its so"
"urce."
msgstr ""

msgid ""
"The order of operations is automatically resolved by Droonga itself.\n"
"You don't have to write queries in the order they should be operated in."
msgstr ""

msgid "#### `condition` {#query-condition}"
msgstr ""

msgid ""
"Abstract\n"
": Conditions to search records from the given source."
msgstr ""

msgid ""
"Value\n"
": Possible patterns:"
msgstr ""

msgid ""
"  1. A [script syntax](http://groonga.org/docs/reference/grn_expr/script_synta"
"x.html) string.\n"
"  2. A hash including [script syntax](http://groonga.org/docs/reference/grn_ex"
"pr/script_syntax.html) string.\n"
"  3. A hash including [query syntax](http://groonga.org/docs/reference/grn_exp"
"r/query_syntax.html) string.\n"
"  4. An array of conditions from 1 to 3 and an operator."
msgstr ""

msgid ""
"Default value\n"
": Nothing."
msgstr ""

msgid ""
"If no condition is given, then all records in the source will appear as the se"
"arch result, for following operations and the output."
msgstr ""

msgid ""
"##### Search condition in a Script syntax string {#query-condition-script-synt"
"ax-string}"
msgstr ""

msgid "This is a sample condition in the script syntax:"
msgstr ""

msgid "    \"name == 'Alice' && age >= 20\""
msgstr ""

msgid ""
"It means \"the value of the `name` column equals to `\"Alice\"`, and the value of"
" the `age` column is `20` or more\"."
msgstr ""

msgid ""
"See [the reference document of the script syntax on Groonga](http://groonga.or"
"g/docs/reference/grn_expr/script_syntax.html) for more details."
msgstr ""

msgid ""
"##### Search condition in a hash based on the Script syntax {#query-condition-"
"script-syntax-hash}"
msgstr ""

msgid ""
"In this pattern, you'll specify a search condition as a hash based on a \n"
"[script syntax string](#query-condition-script-syntax-string), like:"
msgstr ""

msgid ""
"    {\n"
"      \"script\"      : \"name == 'Alice' && age >= 20\",\n"
"      \"allowUpdate\" : true\n"
"    }"
msgstr ""

msgid ""
"(*Note: under construction because the specification of the `allowUpdate` para"
"meter is not defined yet.)"
msgstr ""

msgid ""
"##### Search condition in a hash based on the Query syntax {#query-condition-q"
"uery-syntax-hash}"
msgstr ""

msgid "In this pattern, you'll specify a search condition as a hash like:"
msgstr ""

msgid ""
"    {\n"
"      \"query\"                    : \"Alice\",\n"
"      \"matchTo\"                  : [\"name * 2\", \"job * 1\"],\n"
"      \"defaultOperator\"          : \"&&\",\n"
"      \"allowPragma\"              : true,\n"
"      \"allowColumn\"              : true,\n"
"      \"matchEscalationThreshold\" : 10\n"
"    }"
msgstr ""

msgid ""
"`query`\n"
": A string to specify the main search query. In most cases, a text posted via "
"a search box in a webpage will be given.\n"
"  See [the document of the query syntax in Groonga](http://groonga.org/docs/re"
"ference/grn_expr/query_syntax.html) for more details.\n"
"  This parameter is always required."
msgstr ""

msgid ""
"`matchTo`\n"
": An array of strings, meaning the list of column names to be searched by defa"
"ult. If you specify no column name in the `query`, it will work as a search qu"
"ery for columns specified by this parameter.\n"
"  You can apply weighting for each column, like `name * 2`.\n"
"  This parameter is optional."
msgstr ""

msgid ""
"`defaultOperator`\n"
": A string to specify the default logical operator for multiple queries listed"
" in the `query`. Possible values:"
msgstr ""

msgid ""
"   * `\"&&\"` : means \"AND\" condition.\n"
"   * `\"||\"` : means \"OR\" condition.\n"
"   * `\"-\"`  : means [\"NOT\" condition](http://groonga.org/docs/reference/grn_ex"
"pr/query_syntax.html#logical-not)."
msgstr ""

msgid "  This parameter is optional, the default value is `\"&&\"`."
msgstr ""

msgid ""
"`allowPragma`\n"
": A boolean value to allow (`true`) or disallow (`false`) to use \"pragma\" like"
" `*E-1`, on the head of the `query`.\n"
"  This parameter is optional, the default value is `true`."
msgstr ""

msgid ""
"`allowColumn`\n"
": A boolean value to allow (`true`) or disallow (`false`) to specify column na"
"me for each query in the `query`, like `name:Alice`.\n"
"  This parameter is optional, the default value is `true`."
msgstr ""

msgid ""
"`allowLeadingNot`\n"
": A boolean value to allow (`true`) or disallow (`false`) to appear \"negative "
"expression\" on the first query in the `query`, like `-foobar`.\n"
"  This parameter is optional, the default value is `false`."
msgstr ""

msgid ""
"`matchEscalationThreshold`\n"
": An integer to specify the threshold to escalate search methods.\n"
"  When the number of search results by indexes is smaller than this value, the"
"n Droonga does the search based on partial matching, etc.\n"
"  See also [the specification of the search behavior of Groonga](http://groong"
"a.org/docs/spec/search.html) for more details.\n"
"  This parameter is optional, the default value is `0`."
msgstr ""

msgid "##### Complex search condition as an array {#query-condition-array}"
msgstr ""

msgid "In this pattern, you'll specify a search condition as an array like:"
msgstr ""

msgid ""
"    [\n"
"      \"&&\",\n"
"      <search condition 1>,\n"
"      <search condition 2>,\n"
"      ...\n"
"    ]"
msgstr ""

msgid "The fist element of the array is an operator string. Possible values:"
msgstr ""

msgid ""
" * `\"&&\"` : means \"AND\" condition.\n"
" * `\"||\"` : means \"OR\" condition.\n"
" * `\"-\"`  : means [\"NOT\" condition](http://groonga.org/docs/reference/grn_expr"
"/query_syntax.html#logical-not)."
msgstr ""

msgid ""
"Rest elements are logically operated based on the operator.\n"
"For example this is an \"AND\" operated condition based on two conditions, means"
" \"the value of the `name` equals to `\"Alice\"`, and, the value of the `age` is "
"`20` or more\":"
msgstr ""

msgid "    [\"&&\", \"name == 'Alice'\", \"age >= 20\"]"
msgstr ""

msgid ""
"Nested array means more complex conditions. For example, this means \"`name` eq"
"uals to `\"Alice\"` and `age` is `20` or more, but `job` does not equal to `\"eng"
"ineer\"`\":"
msgstr ""

msgid ""
"    [\n"
"      \"-\",\n"
"      [\"&&\", \"name == 'Alice'\", \"age >= 20\"],\n"
"      \"job == 'engineer'\"\n"
"    ]"
msgstr ""

msgid "#### `sortBy` {#query-sortBy}"
msgstr ""

msgid ""
"Abstract\n"
": Conditions for sorting and paging."
msgstr ""

msgid ""
"  1. An array of column name strings.\n"
"  2. A hash including an array of sort column name strings and paging conditio"
"ns."
msgstr ""

msgid ""
"If sort conditions are not specified, then all results will appear as-is, for "
"following operations and the output."
msgstr ""

msgid "##### Basic sort condition {#query-sortBy-array}"
msgstr ""

msgid "Sort condition is given as an array of column name strings."
msgstr ""

msgid ""
"At first Droonga tries to sort records by the value of the first given sort co"
"lumn. After that, if there are multiple records which have same value for the "
"column, then Droonga tries to sort them by the secondary given sort column. Th"
"ese processes are repeated for all given sort columns."
msgstr ""

msgid "You must specify sort columns as an array, even if there is only one column."
msgstr ""

msgid ""
"Records are sorted by the value of the column value, in an ascending order. Re"
"sults can be sorted in descending order if sort column name has a prefix `-`."
msgstr ""

msgid ""
"For example, this condition means \"sort records by the `name` at first in an a"
"scending order, and sort them by their `age~ column in the descending order\":"
msgstr ""

msgid "    [\"name\", \"-age\"]"
msgstr ""

msgid "##### Paging of sorted results {#query-sortBy-hash}"
msgstr ""

msgid "Paging conditions can be specified as a part of a sort condition hash, like:"
msgstr ""

msgid ""
"    {\n"
"      \"keys\"   : [<Sort columns>],\n"
"      \"offset\" : <Offset of paging>,\n"
"      \"limit\"  : <Number of results to be extracted>\n"
"    }"
msgstr ""

msgid ""
"`keys`\n"
": Sort conditions same to [the basic sort condition](#query-sortBy-array).\n"
"  This parameter is always required."
msgstr ""

msgid ""
"`offset`\n"
": An integer meaning the offset to the paging of sorted results. Possible valu"
"es are `0` or larger integers."
msgstr ""

msgid "  This parameter is optional and the default value is `0`."
msgstr ""

msgid ""
"`limit`\n"
": An integer meaning the number of sorted results to be extracted. Possible va"
"lues are `-1`, `0`, or larger integers. The value `-1` means \"return all resul"
"ts\"."
msgstr ""

msgid "  This parameter is optional and the default value is `-1`."
msgstr ""

msgid "For example, this condition extracts 10 sorted results from 11th to 20th:"
msgstr ""

msgid ""
"    {\n"
"      \"keys\"   : [\"name\", \"-age\"],\n"
"      \"offset\" : 10,\n"
"      \"limit\"  : 10\n"
"    }"
msgstr ""

msgid ""
"In most cases, paging by a sort condition is faster than paging by `output`'s "
"`limit` and `output`, because this operation reduces the number of records."
msgstr ""

msgid "#### `groupBy` {#query-groupBy}"
msgstr ""

msgid ""
"Abstract\n"
": A condition for grouping of (sorted) search results."
msgstr ""

msgid ""
"  1. A condition string to do grouping. (a column name or an expression)\n"
"  2. A hash to specify a condition for grouping with details."
msgstr ""

msgid ""
"If a condition for grouping is given, then grouped result records will appear "
"as the result, for following operations and the output."
msgstr ""

msgid "##### Basic condition of grouping {#query-groupBy-string}"
msgstr ""

msgid ""
"A condition of grouping is given as a string of a column name or an expression"
"."
msgstr ""

msgid ""
"Droonga groups (sorted) search result records, based on the value of the speci"
"fied column. Then the result of the grouping will appear instead of search res"
"ults from the `source`. Result records of a grouping will have following colum"
"ns:"
msgstr ""

msgid ""
"`_key`\n"
": A value of the grouped column."
msgstr ""

msgid ""
"`_nsubrecs`\n"
": An integer meaning the number of grouped records."
msgstr ""

msgid ""
"For example, this condition means \"group records by their `job` column's value"
", with the number of grouped records for each value\":"
msgstr ""

msgid "    \"job\""
msgstr ""

msgid "##### Condition of grouping with details {#query-groupBy-hash}"
msgstr ""

msgid "A condition of grouping can include more options, like:"
msgstr ""

msgid ""
"    {\n"
"      \"key\"            : \"<Basic condition for grouping>\",\n"
"      \"maxNSubRecords\" : <Number of sample records included into each grouped "
"result>\n"
"    }"
msgstr ""

msgid ""
"`key`\n"
": A string meaning [a basic condition of grouping](#query-groupBy-string).\n"
"  This parameter is always required."
msgstr ""

msgid ""
"`maxNSubRecords`\n"
": An integer, meaning maximum number of sample records included into each grou"
"ped result. Possible values are `0` or larger. `-1` is not acceptable."
msgstr ""

msgid "  This parameter is optional, the default value is `0`."
msgstr ""

msgid ""
"For example, this condition will return results grouped by their `job` column "
"with one sample record per a grouped result:"
msgstr ""

msgid ""
"    {\n"
"      \"key\"            : \"job\",\n"
"      \"maxNSubRecords\" : 1\n"
"    }"
msgstr ""

msgid ""
"Grouped results will have all columns of [the result of the basic conditions f"
"or grouping](#query-groupBy-string), and following extra columns:"
msgstr ""

msgid ""
"`_subrecs`\n"
": An array of sample records which have the value in its grouped column."
msgstr ""

msgid ""
"*Note: On the version {{ site.droonga_version }}, too many records can be retu"
"rned larger than the specified `maxNSubRecords`, if the dataset has multiple v"
"olumes. This is a known problem and to be fixed in a future version."
msgstr ""
"※バージョン {{ site.droonga_version }} では、データセットが複数のボリュームに別れている場合、集約前のレコードの代表が `max"
"NSubRecords` で指定した数よりも多く返される場合があります。これは既知の問題で、将来のバージョンで修正される予定です。"

msgid "#### `output` {#query-output}"
msgstr ""

msgid ""
"Abstract\n"
": A output definition for a search result"
msgstr ""

msgid ""
"Value\n"
": A hash including information to control output format."
msgstr ""

msgid ""
"If no `output` is given, then search results of the query won't be exported to"
" the returned message.\n"
"You can reduce processing time and traffic via omitting of `output` for tempor"
"ary tables which are used only for grouping and so on."
msgstr ""

msgid "An output definition is given as a hash like:"
msgstr ""

msgid ""
"    {\n"
"      \"elements\"   : [<Names of elements to be exported>],\n"
"      \"format\"     : \"<Format of each record>\",\n"
"      \"offset\"     : <Offset of paging>,\n"
"      \"limit\"      : <Number of records to be exported>,\n"
"      \"attributes\" : <Definition of columnst to be exported for each record>\n"
"    }"
msgstr ""

msgid ""
"`elements`\n"
": An array of strings, meaning the list of elements exported to the result of "
"the search query in a [search response](#response).\n"
"  Possible values are following, and you must specify it as an array even if y"
"ou export just one element:"
msgstr ""

msgid ""
"   * `\"startTime\"`\n"
"   * `\"elapsedTime\"`\n"
"   * `\"count\"`\n"
"   * `\"attributes\"`\n"
"   * `\"records\"`"
msgstr ""

msgid ""
"  This parameter is optional, there is not default value. Nothing will be expo"
"rted if no element is specified."
msgstr ""

msgid ""
"`format`\n"
": A string meaning the format of exported each record.\n"
"  Possible values:"
msgstr ""

msgid ""
"   * `\"simple\"`  : Each record will be exported as an array of column values.\n"
"   * `\"complex\"` : Each record will be exported as a hash."
msgstr ""

msgid "  This parameter is optional, the default value is `\"simple\"`."
msgstr ""

msgid ""
"`offset`\n"
": An integer meaning the offset to the paging of exported records. Possible va"
"lues are `0` or larger integers."
msgstr ""

msgid ""
"`limit`\n"
": An integer meaning the number of exported records. Possible values are `-1`,"
" `0`, or larger integers. The value `-1` means \"export all records\"."
msgstr ""

msgid ""
"`attributes`\n"
": Definition of columns to be exported for each record.\n"
"  Possible patterns:"
msgstr ""

msgid ""
"   1. An array of column definitions.\n"
"   2. A hash of column definitions."
msgstr ""

msgid "  Each column can be defined in one of following styles:"
msgstr ""

msgid ""
"   * A name string of a column.\n"
"     * `\"name\"` : Exports the value of the `name` column, as is.\n"
"     * `\"age\"`  : Exports the value of the `age` column, as is.\n"
"   * A hash with details:\n"
"     * This exports the value of the `name` column as a column with different "
"name `realName`."
msgstr ""

msgid "           { \"label\" : \"realName\", \"source\" : \"name\" }"
msgstr ""

msgid ""
"     * This exports the snippet in HTML fragment as a column with the name `ht"
"ml`."
msgstr ""

msgid "           { \"label\" : \"html\", \"source\": \"snippet_html(name)\" }"
msgstr ""

msgid ""
"     * This exports a static value `\"Japan\"` for the `country` column of all r"
"ecords.\n"
"       (This will be useful for debugging, or a use case to try modification o"
"f APIs.)"
msgstr ""

msgid "           { \"label\" : \"country\", \"source\" : \"'Japan'\" }"
msgstr ""

msgid ""
"     * This exports a number of grouped records as the `\"itemsCount\"` column o"
"f each record (grouped result)."
msgstr ""

msgid "           { \"label\" : \"itemsCount\", \"source\" : \"_nsubrecs\", }"
msgstr ""

msgid ""
"     * This exports samples of the source records of grouped records, as the `"
"\"items\"` column of grouped records.\n"
"       The format of the `\"attributes\"` is just same to this section."
msgstr ""

msgid ""
"           { \"label\" : \"items\", \"source\" : \"_subrecs\",\n"
"             \"attributes\": [\"name\", \"price\"] }"
msgstr ""

msgid ""
"  An array of column definitions can contain any type definition described abo"
"ve, like:"
msgstr ""

msgid ""
"      [\n"
"        \"name\",\n"
"        \"age\",\n"
"        { \"label\" : \"realName\", \"source\" : \"name\" }\n"
"      ]"
msgstr ""

msgid ""
"  In this case, you can use a special column name `\"*\"` which means \"all colum"
"ns except special columns like `_key`\"."
msgstr ""

msgid ""
"    * `[\"*\"]` exports all columns (except `_key` and `_id`), as is.\n"
"    * `[\"_key\", \"*\"]` exports exports all columns as is, with preceding `_key`"
".\n"
"    * `[\"*\", \"_nsubrecs\"]` exports exports all columns as is, with following `"
"_nsubrecs`."
msgstr ""

msgid ""
"  A hash of column definitions can contain any type definition described above"
" except `label` of hashes, because keys of the hash means `label` of each colu"
"mn, like:"
msgstr ""

msgid ""
"      {\n"
"        \"name\"     : \"name\",\n"
"        \"age\"      : \"age\",\n"
"        \"realName\" : { \"source\" : \"name\" },\n"
"        \"country\"  : { \"source\" : \"'Japan'\" }\n"
"      }"
msgstr ""

msgid ""
"  This parameter is optional, there is no default value. No column will be exp"
"orted if no column is specified."
msgstr ""

msgid "## Responses {#response}"
msgstr ""

msgid ""
"This command returns a hash as the result as the `body`, with `200` as the `st"
"atusCode`."
msgstr ""

msgid ""
"Keys of the result hash is the name of each query (a result of a search query)"
", values of the hash is the result of each [search query](#query-parameters), "
"like:"
msgstr ""

msgid ""
"    {\n"
"      \"<Name of the query 1>\" : {\n"
"        \"startTime\"   : \"<Time to start the operation>\",\n"
"        \"elapsedTime\" : <Elapsed time to process the query, in milliseconds),\n"
"        \"count\"       : <Number of records searched by the given conditions>,\n"
"        \"attributes\"  : <Array or hash of exported columns>,\n"
"        \"records\"     : [<Array of search result records>]\n"
"      },\n"
"      \"<Name of the query 2>\" : { ... },\n"
"      ...\n"
"    }"
msgstr ""

msgid ""
"A hash of a search query's result can have following elements, but only some e"
"lements specified in the `elements` of the [`output` parameter](#query-output)"
" will appear in the response."
msgstr ""

msgid "### `startTime` {#response-query-startTime}"
msgstr ""

msgid "A local time string meaning the search operation is started."
msgstr ""

msgid ""
"It is formatted in the [W3C-DTF](http://www.w3.org/TR/NOTE-datetime \"Date and "
"Time Formats\"), with the time zone like:"
msgstr ""

msgid "    2013-11-29T08:15:30+09:00"
msgstr ""

msgid "### `elapsedTime` {#response-query-elapsedTime}"
msgstr ""

msgid "An integer meaning the elapsed time of the search operation, in milliseconds."
msgstr ""

msgid "### `count` {#response-query-count}"
msgstr ""

msgid ""
"An integer meaning the total number of search result records.\n"
"Paging options `offset` and `limit` in [`sortBy`](#query-sortBy) or [`output`]"
"(#query-output) will not affect to this count."
msgstr ""

msgid "### `attributes` and `records` {#response-query-attributes-and-records}"
msgstr ""

msgid ""
" * `attributes` is an array or a hash including information of exported column"
"s for each record.\n"
" * `records` is an array of search result records."
msgstr ""

msgid ""
"There are two possible patterns of `attributes` and `records`, based on the [`"
"output`](#query-output)'s `format` parameter."
msgstr ""

msgid "#### Simple format result {#response-query-simple-attributes-and-records}"
msgstr ""

msgid ""
"A search result with `\"simple\"` as the value of `output`'s `format` will be re"
"turned as a hash like:"
msgstr ""

msgid ""
"    {\n"
"      \"startTime\"   : \"<Time to start the operation>\",\n"
"      \"elapsedTime\" : <Elapsed time to process the query),\n"
"      \"count\"       : <Total number of search result records>,\n"
"      \"attributes\"  : [\n"
"        { \"name\"   : \"<Name of the column 1>\",\n"
"          \"type\"   : \"<Type of the column 1>\",\n"
"          \"vector\" : <It this column is a vector column?> },\n"
"        { \"name\"   : \"<Name of the column 2>\",\n"
"          \"type\"   : \"<Type of the column 2>\",\n"
"          \"vector\" : <It this column is a vector column?> },\n"
"        { \"name\"       : \"<Name of the column 3 (with subrecords)>\"\n"
"          \"attributes\" : [\n"
"          { \"name\"   : \"<Name of the column 3-1>\",\n"
"            \"type\"   : \"<Type of the column 3-1>\",\n"
"            \"vector\" : <It this column is a vector column?> },\n"
"          { \"name\"   : \"<Name of the the column 3-2>\",\n"
"            \"type\"   : \"<Type of the the column 3-2>\",\n"
"            \"vector\" : <It this column is a vector column?> },\n"
"          ],\n"
"          ...\n"
"        },\n"
"        ...\n"
"      ],\n"
"      \"records\"     : [\n"
"        [<Value of the column 1 of the record 1>,\n"
"         <Value of the column 2 of the record 1>,\n"
"         [\n"
"          [<Value of the column of 3-1 of the subrecord 1 of the record 1>,\n"
"           <Value of the column of 3-2 of the subrecord 2 of the record 1>,\n"
"           ...],\n"
"          [<Value of the column of 3-1 of the subrecord 1 of the record 1>,\n"
"           <Value of the column of 3-2 of the subrecord 2 of the record 1>,\n"
"           ...],\n"
"          ...],\n"
"         ...],\n"
"        [<Value of the column 1 of the record 2>,\n"
"         <Value of the column 2 of the record 2>,\n"
"         [\n"
"          [<Value of the column of 3-1 of the subrecord 1 of the record 2>,\n"
"           <Value of the column of 3-2 of the subrecord 2 of the record 2>,\n"
"           ...],\n"
"          [<Value of the column of 3-1 of the subrecord 1 of the record 2>,\n"
"           <Value of the column of 3-2 of the subrecord 2 of the record 2>,\n"
"           ...],\n"
"          ...],\n"
"         ...],\n"
"        ...\n"
"      ]\n"
"    }"
msgstr ""

msgid ""
"This format is designed to reduce traffic with small responses, instead of use"
"ful rich data format.\n"
"Recommended for cases when the response can include too much records, or the s"
"ervice can accept too much requests."
msgstr ""

msgid "##### `attributes` {#response-query-simple-attributes}"
msgstr ""

msgid ""
"An array of column informations for each exported search result, ordered by [t"
"he `output` parameter](#query-output)'s `attributes`."
msgstr ""

msgid ""
"Each column information is returned as a hash in the form of one of these thre"
"e variations corresponding to the kind of values. The hash will have the follo"
"wing keys respectively:"
msgstr ""

msgid "###### For ordinal columns"
msgstr ""

msgid ""
"`name`\n"
": A string meaning the name (label) of the exported column. It is just same to"
" labels defined in [the `output` parameter](#query-output)'s `attributes`."
msgstr ""

msgid ""
"`type`\n"
": A string meaning the value type of the column.\n"
"  The type is indicated as one of [Groonga's primitive data formats](http://gr"
"oonga.org/docs/reference/types.html), or a name of an existing table for refer"
"ring columns."
msgstr ""

msgid ""
"`vector`\n"
": A boolean value meaning it is a [vector column](http://groonga.org/docs/tuto"
"rial/data.html#vector-types) or not.\n"
"  Possible values:"
msgstr ""

msgid ""
"   * `true`  : It is a vector column.\n"
"   * `false` : It is not a vector column, but a scalar column."
msgstr ""

msgid "###### For columns corresponding to subrecords"
msgstr ""

msgid ""
"`attributes`\n"
": An array including information about columns of subrecords. The form is the "
"same as `attributes` for (main) records. This means `attributes` has recursive"
" structure."
msgstr ""

msgid "###### For expressions"
msgstr ""

msgid "##### `records` {#response-query-simple-records}"
msgstr ""

msgid "An array of exported search result records."
msgstr ""

msgid ""
"Each record is exported as an array of column values, ordered by the [`output`"
" parameter](#query-output)'s `attributes`."
msgstr ""

msgid ""
"A value of [date time type](http://groonga.org/docs/tutorial/data.html#date-an"
"d-time-type) column will be returned as a string formatted in the [W3C-DTF](ht"
"tp://www.w3.org/TR/NOTE-datetime \"Date and Time Formats\"), with the time zone."
msgstr ""

msgid "#### Complex format result {#response-query-complex-attributes-and-records}"
msgstr ""

msgid ""
"A search result with `\"complex\"` as the value of `output`'s `format` will be r"
"eturned as a hash like:"
msgstr ""

msgid ""
"    {\n"
"      \"startTime\"   : \"<Time to start the operation>\",\n"
"      \"elapsedTime\" : <Elapsed time to process the query),\n"
"      \"count\"       : <Total number of search result records>,\n"
"      \"attributes\"  : {\n"
"        \"<Name of the column 1>\" : { \"type\"   : \"<Type of the column 1>\",\n"
"                                     \"vector\" : <It this column is a vector co"
"lumn?> },\n"
"        \"<Name of the column 2>\" : { \"type\"   : \"<Type of the column 2>\",\n"
"                                     \"vector\" : <It this column is a vector co"
"lumn?> },\n"
"        \"<Name of the column 3 (with subrecords)>\" : {\n"
"          \"attributes\" : {\n"
"            \"<Name of the column 3-1>\" : { \"type\"   : \"<Type of the column 3-1"
">\",\n"
"                                           \"vector\" : <It this column is a vec"
"tor column?> },\n"
"            \"<Name of the column 3-2>\" : { \"type\"   : \"<Type of the column 3-2"
">\",\n"
"                                           \"vector\" : <It this column is a vec"
"tor column?> },\n"
"            ...\n"
"          }\n"
"        },\n"
"        ...\n"
"      ],\n"
"      \"records\"     : [\n"
"        { \"<Name of the column 1>\" : <Value of the column 1 of the record 1>,\n"
"          \"<Name of the column 2>\" : <Value of the column 2 of the record 1>,\n"
"          \"<Name of the column 3 (with subrecords)>\" : [\n"
"            { \"<Name of the column 3-1>\" : <Value of the column 3-1 of the sub"
"record 1 of record 1>,\n"
"              \"<Name of the column 3-2>\" : <Value of the column 3-2 of the sub"
"record 1 of record 1>,\n"
"              ... },\n"
"            { \"<Name of the column 3-1>\" : <Value of the column 3-1 of the sub"
"record 2 of record 1>,\n"
"              \"<Name of the column 3-2>\" : <Value of the column 3-2 of the sub"
"record 2 of record 1>,\n"
"              ... },\n"
"            ...\n"
"          ],\n"
"          ...                                                                }"
",\n"
"        { \"<Name of the column 1>\" : <Value of the column 1 of the record 2>,\n"
"          \"<Name of the column 2>\" : <Value of the column 2 of the record 2>,\n"
"          \"<Name of the column 3 (with subrecords)>\" : [\n"
"            { \"<Name of the column 3-1>\" : <Value of the column 3-1 of the sub"
"record 1 of record 2>,\n"
"              \"<Name of the column 3-2>\" : <Value of the column 3-2 of the sub"
"record 1 of record 2>,\n"
"              ... },\n"
"            { \"<Name of the column 3-1>\" : <Value of the column 3-1 of the sub"
"record 2 of record 2>,\n"
"              \"<Name of the column 3-2>\" : <Value of the column 3-2 of the sub"
"record 2 of record 2>,\n"
"              ... },\n"
"            ...\n"
"          ],\n"
"          ...                                                                }"
",\n"
"        ...\n"
"      ]\n"
"    }"
msgstr ""

msgid ""
"This format is designed to keep human readability, instead of less traffic.\n"
"Recommended for small traffic cases like development, debugging, features only"
" for administrators, and so on."
msgstr ""

msgid "##### `attributes` {#response-query-complex-attributes}"
msgstr ""

msgid ""
"A hash of column informations for each exported search result. Keys of the has"
"h are column names defined by [the `output` parameter](#query-output)'s `attri"
"butes`, values are informations of each column."
msgstr ""

msgid ""
"`type`\n"
": A string meaning the value type of the column.\n"
"  The type is indicated as one of [Groonga's primitive data formats](http://gr"
"oonga.org/docs/reference/types.html), or a name for an existing table for refe"
"rring columns."
msgstr ""

msgid "Has no key. Just a empty hash `{}` will be returned."
msgstr ""

msgid "##### `records` {#response-query-complex-records}"
msgstr ""

msgid ""
"Each record is exported as a hash. Keys of the hash are column names defined b"
"y [`output` parameter](#query-output)'s `attributes`, values are column values"
"."
msgstr ""

msgid "## Error types {#errors}"
msgstr ""

msgid ""
"This command reports errors not only [general errors](/reference/message/#erro"
"r) but also followings."
msgstr ""

msgid "### `MissingSourceParameter`"
msgstr ""

msgid ""
"Means you've forgotten to specify the `source` parameter. The status code is `"
"400`."
msgstr ""

msgid "### `UnknownSource`"
msgstr ""

msgid ""
"Means there is no existing table and no other query with the name, for a `sour"
"ce` of a query. The status code is `404`."
msgstr ""

msgid "### `CyclicSource`"
msgstr ""

msgid "Means there is any circular reference of sources. The status code is `400`."
msgstr ""

msgid "### `SearchTimeout`"
msgstr ""

msgid ""
"Means the engine couldn't finish to process the request in the time specified "
"as `timeout`. The status code is `500`."
msgstr ""
