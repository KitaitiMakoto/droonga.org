msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-05-19 16:10+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: API set for plugins on the handling phase\n"
"layout: en\n"
"---"
msgstr ""

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## Abstract {#abstract}"
msgstr ""

msgid ""
"Each Droonga Engine plugin can have its *handler*.\n"
"On the handling phase, handlers can process a request and return a result."
msgstr ""

msgid "### How to define a handler? {#howto-define}"
msgstr ""

msgid "For example, here is a sample plugin named \"foo\" with a handler:"
msgstr ""

msgid ""
"~~~ruby\n"
"require \"droonga/plugin\""
msgstr ""

msgid ""
"module Droonga::Plugins::FooPlugin\n"
"  extend Plugin\n"
"  register(\"foo\")"
msgstr ""

msgid ""
"  define_single_step do |step|\n"
"    step.name = \"foo\"\n"
"    step.handler = :Handler\n"
"    step.collector = Collectors::And\n"
"  end"
msgstr ""

msgid ""
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      # operations to process a request\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "Steps to define a handler:"
msgstr ""

msgid ""
" 1. Define a module for your plugin (ex. `Droonga::Plugins::FooPlugin`) and re"
"gister it as a plugin. (required)\n"
" 2. Define a \"single step\" corresponding to the handler you are going to imple"
"ment, via [`Droonga::SingleStepDefinition`](#class-Droonga-SingleStepDefinitio"
"n). (required)\n"
" 3. Define a handler class (ex. `Droonga::Plugins::FooPlugin::Handler`) inheri"
"ting [`Droonga::Handler`](#classes-Droonga-Handler). (required)\n"
" 4. Define handling logic for requests as [`#handle`](#classes-Droonga-Handler"
"-handle). (optional)"
msgstr ""

msgid ""
"See also the [plugin development tutorial](../../../tutorial/plugin-developmen"
"t/handler/)."
msgstr ""

msgid "### How a handler works? {#how-works}"
msgstr ""

msgid "A handler works like following:"
msgstr ""

msgid ""
" 1. The Droonga Engine starts.\n"
"    * Your custom steps are registered.\n"
"      Your custom handler classes also.\n"
"    * Then the Droonga Engine starts to wait for request messages.\n"
" 2. A request message is transferred from the adaption phase.\n"
"    Then, the processing phase starts.\n"
"    * The Droonga Engine finds a step definition from the message type.\n"
"    * The Droonga Engine builds a \"single step\" based on the registered defini"
"tion.\n"
"    * A \"single step\" creates an instance of the registered handler class.\n"
"      Then the Droonga Engine enters to the handling phase.\n"
"      * The handler's [`#handle`](#classes-Droonga-Handler-handle) is called w"
"ith a task massage including the request.\n"
"        * The method can process the given incoming message as you like.\n"
"        * The method returns a result value, as the output.\n"
"      * After the handler finishes, the handling phase for the task message (a"
"nd the request) ends.\n"
"    * If no \"step\" is found for the type, nothing happens.\n"
"    * All \"step\"s finish their task, the processing phase for the request ends"
"."
msgstr ""

msgid ""
"As described above, the Droonga Engine creates an instance of the handler clas"
"s for each request."
msgstr ""

msgid ""
"Any error raised from the handler is handled by the Droonga Engine itself. See"
" also [error handling][]."
msgstr ""

msgid "## Configurations {#config}"
msgstr ""

msgid ""
"`action.synchronous` (boolean, optional, default=`false`)\n"
": Indicates that the request must be processed synchronously.\n"
"  For example, a request to define a new column in a table must be processed a"
"fter a request to define the table itself, if the table does not exist yet.\n"
"  Then handlers for these requests have the configuration `action.synchronous "
"= true`."
msgstr ""

msgid "## Classes and methods {#classes}"
msgstr ""

msgid "### `Droonga::SingleStepDefinition` {#classes-Droonga-SingleStepDefinition}"
msgstr ""

msgid "This provides methods to describe the \"step\" corresponding to the handler."
msgstr ""

msgid "#### `#name`, `#name=(name)` {#classes-Droonga-SingleStepDefinition-name}"
msgstr ""

msgid ""
"Describes the name of the step itself.\n"
"Possible value is a string."
msgstr ""

msgid ""
"The Droonga Engine treats an incoming message as a request of a \"command\", if "
"there is any step with the `name` which equals to the message's `type`.\n"
"In other words, this defines the name of the command corresponding to the step"
" itself."
msgstr ""

msgid ""
"#### `#handler`, `#handler=(handler)` {#classes-Droonga-SingleStepDefinition-h"
"andler}"
msgstr ""

msgid ""
"Associates a specific handler class to the step itself.\n"
"You can specify the class as any one of following choices:"
msgstr ""

msgid ""
" * A reference to a handler class itself, like `Handler` or `Droonga::Plugins:"
":FooPlugin::Handler`.\n"
"   Of course, the class have to be already defined at the time.\n"
" * A symbol which refers the name of a handler class in the current namespace,"
" like `:Handler`.\n"
"   This is useful if you want to describe the step at first and define the act"
"ual class after that.\n"
" * A class path string of a handler class, like `\"Droonga::Plugins::FooPlugin:"
":Handler\"`.\n"
"   This is also useful to define the class itself after the description."
msgstr ""

msgid ""
"You must define the referenced class by the time the Droonga Engine actually p"
"rocesses the step, if you specify the name of the handler class as a symbol or"
" a string.\n"
"If the Droonga Engine fails to find out the actual handler class, or no handle"
"r is specified, then the Droonga Engine does nothing for the request."
msgstr ""

msgid ""
"#### `#collector`, `#collector=(collector)` {#classes-Droonga-SingleStepDefini"
"tion-collector}"
msgstr ""

msgid ""
"Associates a specific collector class to the step itself.\n"
"You can specify the class as any one of following choices:"
msgstr ""

msgid ""
" * A reference to a collector class itself, like `Collectors::Something` or `D"
"roonga::Plugins::FooPlugin::MyCollector`.\n"
"   Of course, the class have to be already defined at the time.\n"
" * A symbol which refers the name of a collector class in the current namespac"
"e, like `:MyCollector`.\n"
"   This is useful if you want to describe the step at first and define the act"
"ual class after that.\n"
" * A class path string of a collector class, like `\"Droonga::Plugins::FooPlugi"
"n::MyCollector\"`.\n"
"   This is also useful to define the class itself after the description."
msgstr ""

msgid ""
"You must define the referenced class by the time the Droonga Engine actually c"
"ollects results, if you specify the name of the collector class as a symbol or"
" a string.\n"
"If the Droonga Engine fails to find out the actual collector class, or no coll"
"ector is specified, then the Droonga Engine doesn't collect results and return"
"s multiple messages as results."
msgstr ""

msgid "See also [descriptions of collectors][collector]."
msgstr ""

msgid "#### `#write`, `#write=(write)` {#classes-Droonga-SingleStepDefinition-write}"
msgstr ""

msgid ""
"Describes whether the step modifies any data in the storage or don't.\n"
"If a request aims to modify some data in the storage, the request must be proc"
"essed for all replicas.\n"
"Otherwise the Droonga Engine can optimize handling of the step.\n"
"For example, caching of results, reducing of CPU/memory usage, and so on."
msgstr ""

msgid "Possible values are:"
msgstr ""

msgid ""
" * `true`, means \"this step can modify the storage.\"\n"
" * `false`, means \"this step never modifies the storage.\" (default)"
msgstr ""

msgid ""
"#### `#inputs`, `#inputs=(inputs)` {#classes-Droonga-SingleStepDefinition-inpu"
"ts}"
msgstr ""

msgid "(TBD)"
msgstr ""

msgid ""
"#### `#output`, `#output=(output)` {#classes-Droonga-SingleStepDefinition-outp"
"ut}"
msgstr ""

msgid "### `Droonga::Handler` {#classes-Droonga-Handler}"
msgstr ""

msgid ""
"This is the common base class of any handler.\n"
"Your plugin's handler class must inherit this."
msgstr ""

msgid "#### `#handle(message)` {#classes-Droonga-Handler-handle}"
msgstr ""

msgid ""
"This method receives a [`Droonga::HandlerMessage`](#classes-Droonga-HandlerMes"
"sage) wrapped task message.\n"
"You can read the request information via its methods."
msgstr ""

msgid ""
"In this base class, this method is defined as just a placeholder and it does n"
"othing.\n"
"To process messages, you have to override it by yours, like following:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MySearch\n"
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      search_query = message.request[\"body\"][\"query\"]\n"
"      ...\n"
"      { ... } # the result\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"The Droonga Engine uses the returned value of this method as the result of the"
" handling.\n"
"It will be used to build the body of the unified response, and delivered to th"
"e Protocol Adapter."
msgstr ""

msgid "### `Droonga::HandlerMessage` {#classes-Droonga-HandlerMessage}"
msgstr ""

msgid "This is a wrapper for a task message."
msgstr ""

msgid ""
"The Droonga Engine analyzes a transferred request message, and build multiple "
"task massages to process the request.\n"
"A task massage has some information: a request, a step, descendant tasks, and "
"so on."
msgstr ""

msgid "#### `#request` {#classes-Droonga-HandlerMessage-request}"
msgstr ""

msgid ""
"This returns the request message.\n"
"You can read request body via this method. For example:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MySearch\n"
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      request = message.request\n"
"      search_query = request[\"body\"][\"query\"]\n"
"      ...\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "#### `@context` {#classes-Droonga-HandlerMessage-context}"
msgstr ""

msgid ""
"This is a reference to the `Groonga::Context` instance for the storage of the "
"corresponding volume.\n"
"See the [class reference of Rroonga][Groonga::Context]."
msgstr ""

msgid ""
"You can use any feature of Rroonga via `@context`.\n"
"For example, this code returns the number of records in the specified table:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::CountRecords\n"
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      request = message.request\n"
"      table_name = request[\"body\"][\"table\"]\n"
"      count = @context[table_name].size\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"  [error handling]: ../error/\n"
"  [collector]: ../collector/\n"
"  [Groonga::Context]: http://ranguba.org/rroonga/en/Groonga/Context.html"
msgstr ""
