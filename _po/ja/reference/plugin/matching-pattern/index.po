msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: Matching pattern for messages\n"
"layout: en\n"
"---"
msgstr ""
"---\n"
"title: メッセージのマッチングパターン\n"
"layout: ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## Abstract {#abstract}"
msgstr "## 概要 {#abstract}"

msgid ""
"The Droonga Engine provides a tiny language to specify patterns of messages, c"
"alled *matching pattern*.\n"
"It is used to specify target messages of various operations, ex. plugins."
msgstr ""
"Droonga Engineはメッセージのパターンを指定するための小規模な言語を実装しています。これを*マッチングパターン*と呼びます。\n"
"マッチングパターンは、プラグインなどの様々な場所で処理対象のメッセージを指定するために使われます。"

msgid "## Examples {#examples}"
msgstr "## 例 {#examples}"

msgid "### Simple matching"
msgstr "### 単純なマッチング"

msgid "    pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid "This matches to messages like:"
msgstr "これは以下のようなメッセージにマッチします："

msgid ""
"    {\n"
"      \"type\": \"search\",\n"
"      ...\n"
"    }"
msgstr ""

msgid "### Matching for a deep target"
msgstr "### 深い位置にある対象へのマッチング"

msgid "    pattern = [\"body.success\", :equal, true]"
msgstr ""

msgid ""
"    {\n"
"      \"type\": \"add.result\",\n"
"      \"body\": {\n"
"        \"success\": true\n"
"      }\n"
"    }"
msgstr ""

msgid "Doesn't match to:"
msgstr "以下にはマッチしません："

msgid ""
"    {\n"
"      \"type\": \"add.result\",\n"
"      \"body\": {\n"
"        \"success\": false\n"
"      }\n"
"    }"
msgstr ""

msgid "### Nested patterns"
msgstr "### パターン自体のネスト"

msgid ""
"    pattern = [\n"
"                 [\"type\", :equal, \"table_create\"],\n"
"                 :or,\n"
"                 [\"body.success\", :equal, true]\n"
"              ]"
msgstr ""

msgid "This matches to both:"
msgstr "これは以下の両方にマッチします："

msgid ""
"    {\n"
"      \"type\": \"table_create\",\n"
"      ...\n"
"    }"
msgstr ""

msgid "and:"
msgstr "および："

msgid ""
"    {\n"
"      \"type\": \"column_create\",\n"
"      ...\n"
"      \"body\": {\n"
"        \"success\": true\n"
"      }\n"
"    }"
msgstr ""

msgid "## Syntax {#syntax}"
msgstr "## 文法 {#syntax}"

msgid ""
"There are two typeos of matching patterns: \"basic pattern\" and \"nested pattern"
"\"."
msgstr "マッチングパターンには「基本パターン」と「ネストしたパターン」の2種類があります。"

msgid "### Basic pattern {#syntax-basic}"
msgstr "### 基本パターン {#syntax-basic}"

msgid "#### Structure {#syntax-basic-structure}"
msgstr ""

msgid ""
"A basic pattern is described as an array including 2 or more elements, like fo"
"llowing:"
msgstr ""

msgid "    [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
" * The first element is a *target path*. It means the location of the informat"
"ion to be checked, in the [message][].\n"
" * The second element is an *operator*. It means how the information specified"
" by the target path should be checked.\n"
" * The third element is an *argument for the oeprator*. It is a primitive valu"
"e (string, numeric, or boolean) or an array of values. Some operators require "
"no argument."
msgstr ""

msgid "#### Target path {#syntax-basic-target-path}"
msgstr ""

msgid "The target path is specified as a string, like:"
msgstr ""

msgid "    \"body.success\""
msgstr ""

msgid ""
"The matching mechanism of the Droonga Engine interprets it as a dot-separated "
"list of *path components*.\n"
"A path component represents the property in the message with same name.\n"
"So, the example above means the location:"
msgstr ""

msgid ""
"    {\n"
"      \"body\": {\n"
"        \"success\": <target>\n"
"      }\n"
"    }"
msgstr ""

msgid "#### Avialable operators {#syntax-basic-operators}"
msgstr ""

msgid "The operator is specified as a symbol."
msgstr ""

msgid ""
"`:equal`\n"
": Returns `true`, if the target value is equal to the given value. Otherwise `"
"false`.\n"
"  For example,"
msgstr ""

msgid "      [\"type\", :equal, \"search\"]"
msgstr ""

msgid "  The pattern above matches to a message like following:"
msgstr ""

msgid ""
"      {\n"
"        \"type\": \"search\",\n"
"        ...\n"
"      }"
msgstr ""

msgid ""
"`:in`\n"
": Returns `true`, if the target value is in the given array of values. Otherwi"
"se `false`.\n"
"  For example,"
msgstr ""

msgid "      [\"type\", :in, [\"search\", \"select\"]]"
msgstr ""

msgid ""
"      {\n"
"        \"type\": \"select\",\n"
"        ...\n"
"      }"
msgstr ""

msgid "  But it doesn't match to:"
msgstr ""

msgid ""
"      {\n"
"        \"type\": \"find\",\n"
"        ...\n"
"      }"
msgstr ""

msgid ""
"`:include`\n"
": Returns `true` if the target array of values includes the given value. Other"
"wise `false`.\n"
"  In other words, this is the opposite of the `:in` operator.\n"
"  For example,"
msgstr ""

msgid "      [\"body.tags\", :include, \"News\"]"
msgstr ""

msgid ""
"      {\n"
"        \"type\": \"my.notification\",\n"
"        \"body\": {\n"
"          \"tags\": [\"News\", \"Groonga\", \"Droonga\", \"Fluentd\"]\n"
"        }\n"
"      }"
msgstr ""

msgid ""
"`:exist`\n"
": Returns `true` if the target exists. Otherwise `false`.\n"
"  For example,"
msgstr ""

msgid "      [\"body.comments\", :exist, \"News\"]"
msgstr ""

msgid ""
"      {\n"
"        \"type\": \"my.notification\",\n"
"        \"body\": {\n"
"          \"title\": \"Hello!\",\n"
"          \"comments\": []\n"
"        }\n"
"      }"
msgstr ""

msgid ""
"      {\n"
"        \"type\": \"my.notification\",\n"
"        \"body\": {\n"
"          \"title\": \"Hello!\"\n"
"        }\n"
"      }"
msgstr ""

msgid ""
"`:start_with`\n"
": Returns `true` if the target string value starts with the given string. Othe"
"rwise `false`.\n"
"  For example,"
msgstr ""

msgid "      [\"body.path\", :start_with, \"/archive/\"]"
msgstr ""

msgid ""
"      {\n"
"        \"type\": \"my.notification\",\n"
"        \"body\": {\n"
"          \"path\": \"/archive/2014/02/28.html\"\n"
"        }\n"
"      }"
msgstr ""

msgid "### Nested pattern {#syntax-nested}"
msgstr ""

msgid "#### Structure {#syntax-nested-structure}"
msgstr ""

msgid ""
"A nested pattern is described as an array including 3 elements, like following"
":"
msgstr ""

msgid ""
"    [\n"
"      [\"type\", :equal, \"table_create\"],\n"
"      :or,\n"
"      [\"type\", :equal, \"column_create\"]\n"
"    ]"
msgstr ""

msgid ""
" * The first and the third elements are patterns, basic or nested. (In other w"
"ords, you can nest patterns recursively.)\n"
" * The second element is a *logical operator*."
msgstr ""

msgid "#### Avialable operators {#syntax-nested-operators}"
msgstr ""

msgid ""
"`:and`\n"
": Returns `true` if both given patterns are evaluated as `true`. Otherwise `fa"
"lse`."
msgstr ""

msgid ""
"`:or`\n"
": Returns `true` if one of given patterns (the first or the third element) is "
"evaluated as `true`. Otherwise `false`."
msgstr ""

msgid "  [message]:../../message/"
msgstr ""
