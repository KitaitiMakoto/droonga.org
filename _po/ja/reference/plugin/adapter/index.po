msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: API set for plugins on the adaption phase\n"
"layout: en\n"
"---"
msgstr ""
"---\n"
"title: AdaptionフェイズでのプラグインAPI\n"
"layout: ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## Abstract {#abstract}"
msgstr "## 概要 {#abstract}"

msgid ""
"Each Droonga Engine plugin can have its *adapter*. On the adaption phase, adap"
"ters can modify both incoming messages (from the Protocol Adapter to the Droon"
"ga Engine, in other words, they are \"request\"s) and outgoing messages (from th"
"e Droonga Engine to the Protocol Adapter, in other words, they are \"response\"s"
")."
msgstr ""

msgid "### How to define an adapter? {#howto-define}"
msgstr ""

msgid "For example, here is a sample plugin named \"foo\" with an adapter:"
msgstr ""

msgid ""
"~~~ruby\n"
"require \"droonga/plugin\""
msgstr ""

msgid ""
"module Droonga::Plugins::FooPlugin\n"
"  Plugin.registry.register(\"foo\", self)"
msgstr ""

msgid ""
"  class Adapter < Droonga::Adapter\n"
"    # operations to configure this adapter\n"
"    XXXXXX = XXXXXX"
msgstr ""

msgid ""
"    def adapt_input(input_message)\n"
"      # operations to modify incoming messages\n"
"      input_message.XXXXXX = XXXXXX\n"
"    end"
msgstr ""

msgid ""
"    def adapt_output(output_message)\n"
"      # operations to modify outgoing messages\n"
"      output_message.XXXXXX = XXXXXX\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "Steps to define an adapter:"
msgstr ""

msgid ""
" 1. Define a module for your plugin (ex. `Droonga::Plugins::FooPlugin`) and re"
"gister it as a plugin. (required)\n"
" 2. Define an adapter class (ex. `Droonga::Plugins::FooPlugin::Adapter`) inher"
"iting [`Droonga::Adapter`](#classes-Droonga-Adapter). (required)\n"
" 3. [Configure conditions to apply the adapter](#howto-configure). (required)\n"
" 4. Define adaption logic for incoming messages as [`#adapt_input`](#classes-D"
"roonga-Adapter-adapt_input). (optional)\n"
" 5. Define adaption logic for outgoing messages as [`#adapt_output`](#classes-"
"Droonga-Adapter-adapt_output). (optional)"
msgstr ""

msgid ""
"See also the [plugin development tutorial](../../../tutorial/plugin-developmen"
"t/adapter/)."
msgstr ""

msgid "### How an adapter works? {#how-works}"
msgstr ""

msgid "An adapter works like following:"
msgstr ""

msgid ""
" 1. The Droonga Engine starts.\n"
"    * A global instance of the adapter class (ex. `Droonga::Plugins::FooPlugin"
"::Adapter`) is created and it is registered.\n"
"      * The input pattern and the output pattern are registered.\n"
"    * The Droonga Engine starts to wait for incoming messages.\n"
" 2. An incoming message is transferred from the Protocol Adapter to the Droong"
"a Engine.\n"
"    Then, the adaption phase (for an incoming message) starts.\n"
"    * The adapter's [`#adapt_input`](#classes-Droonga-Adapter-adapt_input) is "
"called, if the message matches to the [input matching pattern](#config) of the"
" adapter.\n"
"    * The method can modify the given incoming message, via [its methods](#cla"
"sses-Droonga-InputMessage).\n"
" 3. After all adapters are applied, the adaption phase for an incoming message"
" ends, and the message is transferred to the next \"planning\" phase.\n"
" 4. An outgoing message returns from the previous \"collection\" phase.\n"
"    Then, the adaption phase (for an outgoing message) starts.\n"
"    * The adapter's [`#adapt_output`](#classes-Droonga-Adapter-adapt_output) i"
"s called, if the message meets following both requirements:\n"
"      - It is originated from an incoming message which was processed by the a"
"dapter itself.\n"
"      - It matches to the [output matching pattern](#config) of the adapter.\n"
"    * The method can modify the given outgoing message, via [its methods](#cla"
"sses-Droonga-OutputMessage).\n"
" 5. After all adapters are applied, the adaption phase for an outgoing message"
" ends, and the outgoing message is transferred to the Protocol Adapter."
msgstr ""

msgid ""
"As described above, the Droonga Engine creates only one global instance of the"
" adapter class for each plugin.\n"
"You should not keep stateful information for a pair of incoming and outgoing m"
"essages as instance variables of the adapter itself.\n"
"Instead, you should give stateful information as a part of the incoming messag"
"e body, and receive it from the body of the corresponding outgoing message."
msgstr ""

msgid ""
"Any error raised from the adapter is handled by the Droonga Engine itself. See"
" also [error handling][]."
msgstr ""

msgid "## Configurations {#config}"
msgstr ""

msgid ""
"`input_message.pattern` ([matching pattern][], optional, default=`nil`)\n"
": A [matching pattern][] for incoming messages.\n"
"  If no pattern (`nil`) is given, any message is regarded as \"matched\"."
msgstr ""

msgid ""
"`output_message.pattern` ([matching pattern][], optional, default=`nil`)\n"
": A [matching pattern][] for outgoing messages.\n"
"  If no pattern (`nil`) is given, any message is regarded as \"matched\"."
msgstr ""

msgid ""
"Note: On Droonga 0.9.9, they are named as `message.input_pattern` and `message"
".output_pattern` but changed to new configurations on Droonga 1.0.0, like abov"
"e. If you write plugins for Droonga 0.9.9, you have to migrate it."
msgstr ""

msgid "## Classes and methods {#classes}"
msgstr ""

msgid "### `Droonga::Adapter` {#classes-Droonga-Adapter}"
msgstr ""

msgid ""
"This is the common base class of any adapter. Your plugin's adapter class must"
" inherit this."
msgstr ""

msgid "#### `#adapt_input(input_message)` {#classes-Droonga-Adapter-adapt_input}"
msgstr ""

msgid ""
"This method receives a [`Droonga::InputMessage`](#classes-Droonga-InputMessage"
") wrapped incoming message.\n"
"You can modify the incoming message via its methods."
msgstr ""

msgid ""
"In this base class, this method is defined as just a placeholder and it does n"
"othing.\n"
"To modify incoming messages, you have to override it by yours, like following:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::QueryFixer\n"
"  class Adapter < Droonga::Adapter\n"
"    def adapt_input(input_message)\n"
"      input_message.body[\"query\"] = \"fixed query\"\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "#### `#adapt_output(output_message)` {#classes-Droonga-Adapter-adapt_output}"
msgstr ""

msgid ""
"This method receives a [`Droonga::OutputMessage`](#classes-Droonga-OutputMessa"
"ge) wrapped outgoing message.\n"
"You can modify the outgoing message via its methods."
msgstr ""

msgid ""
"In this base class, this method is defined as just a placeholder and it does n"
"othing.\n"
"To modify outgoing messages, you have to override it by yours, like following:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::ErrorConcealer\n"
"  class Adapter < Droonga::Adapter\n"
"    def adapt_output(output_message)\n"
"      output_message.status_code = Droonga::StatusCode::OK\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "### `Droonga::InputMessage` {#classes-Droonga-InputMessage}"
msgstr ""

msgid "#### `#type`, `#type=(type)` {#classes-Droonga-InputMessage-type}"
msgstr ""

msgid "This returns the `\"type\"` of the incoming message."
msgstr ""

msgid "You can override it by assigning a new string value, like:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MySearch\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"my-search\"]"
msgstr ""

msgid ""
"    def adapt_input(input_message)\n"
"      p input_message.type\n"
"      # => \"my-search\"\n"
"      #    This message will be handled by a plugin\n"
"      #    for the custom \"my-search\" type."
msgstr ""

msgid "      input_message.type = \"search\""
msgstr ""

msgid ""
"      p input_message.type\n"
"      # => \"search\"\n"
"      #    The messge type (type) is changed.\n"
"      #    This message will be handled by the \"search\" plugin,\n"
"      #    as a regular search request.\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"Note: On Droonga 0.9.9, this method is named as `command` but changed to `type"
"` on Droonga 1.0.0, like above. If you write plugins for Droonga 0.9.9, you ha"
"ve to migrate it."
msgstr ""

msgid "#### `#body`, `#body=(body)` {#classes-Droonga-InputMessage-body}"
msgstr ""

msgid "This returns the `\"body\"` of the incoming message."
msgstr ""

msgid "You can override it by assigning a new value, partially or fully. For example:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MinimumLimit\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid "    MAXIMUM_LIMIT = 10"
msgstr ""

msgid ""
"    def adapt_input(input_message)\n"
"      input_message.body[\"queries\"].each do |name, query|\n"
"        query[\"output\"] ||= {}\n"
"        query[\"output\"][\"limit\"] ||= MAXIMUM_LIMIT\n"
"        query[\"output\"][\"limit\"] = [query[\"output\"][\"limit\"], MAXIMUM_LIMIT].m"
"in\n"
"      end\n"
"      # Now, all queries have \"output.limit=10\".\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "Another case:"
msgstr ""

msgid ""
"    def adapt_input(input_message)\n"
"      # Extract the query string from the custom type message.\n"
"      query_string = input_message[\"body\"][\"query\"]"
msgstr ""

msgid ""
"      # Construct internal search request for the \"search\" type.\n"
"      input_message.type = \"search\"\n"
"      input_message.body = {\n"
"        \"queries\" => {\n"
"          \"source\"    => \"Store\",\n"
"          \"condition\" => {\n"
"            \"query\"   => query_string,\n"
"            \"matchTo\" => [\"name\"],\n"
"          },\n"
"          \"output\" => {\n"
"            \"elements\" => [\"records\"],\n"
"            \"limit\"    => 10,\n"
"          },\n"
"        },\n"
"      }\n"
"      # Now, both \"type\" and \"body\" are completely replaced.\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "### `Droonga::OutputMessage` {#classes-Droonga-OutputMessage}"
msgstr ""

msgid ""
"#### `#status_code`, `#status_code=(status_code)` {#classes-Droonga-OutputMess"
"age-status_code}"
msgstr ""

msgid "This returns the `\"statusCode\"` of the outgoing message."
msgstr ""

msgid "You can override it by assigning a new status code. For example:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::ErrorConcealer\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
"    def adapt_output(output_message)\n"
"      unless output_message.status_code == StatusCode::InternalServerError\n"
"        output_message.status_code = Droonga::StatusCode::OK\n"
"        output_message.body = {}\n"
"        output_message.errors = nil\n"
"        # Now any internal server error is ignored and clients\n"
"        # receive regular responses.\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "#### `#errors`, `#errors=(errors)` {#classes-Droonga-OutputMessage-errors}"
msgstr ""

msgid "This returns the `\"errors\"` of the outgoing message."
msgstr ""

msgid ""
"You can override it by assigning new error information, partially or fully. Fo"
"r example:"
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::ErrorExporter\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
"    def adapt_output(output_message)\n"
"      output_message.errors.delete(secret_database)\n"
"      # Delete error information from secret database"
msgstr ""

msgid ""
"      output_message.body[\"errors\"] = {\n"
"        \"records\" => output_message.errors.collect do |database, error|\n"
"          {\n"
"            \"database\" => database,\n"
"            \"error\" => error\n"
"          }\n"
"        end,\n"
"      }\n"
"      # Convert error informations to a fake search result named \"errors\".\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "#### `#body`, `#body=(body)` {#classes-Droonga-OutputMessage-body}"
msgstr ""

msgid "This returns the `\"body\"` of the outgoing message."
msgstr ""

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::SponsoredSearch\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
"    def adapt_output(output_message)\n"
"      output_message.body.each do |name, result|\n"
"        next unless result[\"records\"]\n"
"        result[\"records\"].unshift(sponsored_entry)\n"
"      end\n"
"      # Now all search results include sponsored entry.\n"
"    end"
msgstr ""

msgid ""
"    def sponsored_entry\n"
"      {\n"
"        \"title\"=> \"SALE!\",\n"
"        \"url\"=>   \"http://...\"\n"
"      }\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"  [matching pattern]: ../matching-pattern/\n"
"  [error handling]: ../error/"
msgstr ""
